{
  "version": 3,
  "sources": ["../src/common/util.ts", "../src/common/color.ts", "../src/settings/palettes.ts", "../src/settings/systems.ts", "../src/dither/canvas.ts", "../src/dither/basecanvas.ts", "../src/dither/dithertron.ts", "../src/worker/worker.ts"],
  "sourcesContent": ["\nexport function hex(v: number, nd?: number) {\n    if (!nd) nd = 2;\n    return toradix(v, nd, 16);\n}\n\nexport function toradix(v: number, nd: number, radix: number) {\n    try {\n        var s = v.toString(radix).toUpperCase();\n        while (s.length < nd)\n            s = \"0\" + s;\n        return s;\n    } catch (e) {\n        return v + \"\";\n    }\n}\n\nexport function sqr(x: number) { return x * x; }\n\nexport function range(start: number, end: number): number[] {\n    var arr = [];\n    for (var i = start; i < end; i++) { arr.push(i); }\n    return arr;\n}\n\nexport function stringToByteArray(s: string): Uint8Array {\n    var a = new Uint8Array(s.length);\n    for (var i = 0; i < s.length; i++)\n        a[i] = s.charCodeAt(i);\n    return a;\n}\n", "import { RGBDistanceFunction } from \"./types\";\nimport { range, sqr } from \"./util\";\n\nexport interface ColorChoice {\n    ind: number;\n    count: number;\n}\n\nexport class Centroid {\n    r: number = 0;\n    g: number = 0;\n    b: number = 0;\n    n: number = 0;\n    add(rgb: number) {\n        this.r += (rgb >> 0) & 0xff;\n        this.g += (rgb >> 8) & 0xff;\n        this.b += (rgb >> 16) & 0xff;\n        this.n++;\n    }\n    getAvgRGB(k: number) {\n        var r = Math.max(0, Math.min(255, this.r * k / this.n));\n        var g = Math.max(0, Math.min(255, this.g * k / this.n));\n        var b = Math.max(0, Math.min(255, this.b * k / this.n));\n        return (r << 0) | (g << 8) | (b << 16);\n    }\n}\n\nexport function reducePaletteChoices(imageData: Uint32Array, \n    colors: Uint32Array, \n    count: number, \n    diversity: number,\n    distfn: RGBDistanceFunction) : ColorChoice[] \n{\n    var histo = new Int32Array(colors.length);\n    var err = new Int32Array(4);\n    var tmp = new Uint8ClampedArray(4);\n    var tmp2 = new Uint32Array(tmp.buffer);\n    var bias = diversity*0.5 + 0.5;\n    let decay = diversity*0.25 + 0.65;\n    // choose initial centroids from palette\n    var centroids : Centroid[] = [];\n    var inds : number[] = [];\n    for (let i=0; i<count; i++) {\n        inds.push(Math.floor(i * (colors.length-1) / count));\n        centroids.push(new Centroid());\n    }\n    // iterate over the frame a max. number of items\n    for (let iter=0; iter<10; iter++) {\n        // iterate over pixels, skipping some for performance\n        for (let i=iter; i<imageData.length; i+=(i&15)+1) {\n            let rgbref = imageData[i];\n            err[0] += rgbref & 0xff;\n            err[1] += (rgbref >> 8) & 0xff;\n            err[2] += (rgbref >> 16) & 0xff;\n            tmp[0] = err[0];\n            tmp[1] = err[1];\n            tmp[2] = err[2];\n            let ind1 = getClosestRGB(tmp2[0], inds, colors, distfn);\n            let alt = colors[ind1];\n            centroids[inds.indexOf(ind1)].add(tmp2[0]);\n            let score = distfn(tmp2[0], alt);\n            histo[ind1] += Math.max(0, 256 - score);\n            err[0] -= (alt & 0xff);\n            err[1] -= ((alt >> 8) & 0xff);\n            err[2] -= ((alt >> 16) & 0xff);\n            err[0] *= decay;\n            err[1] *= decay;\n            err[2] *= decay;\n        }\n        // move colors if the new one is better\n        var allinds = range(0, colors.length);\n        var nchanged = 0;\n        for (let i=0; i<count; i++) {\n            // find closest palette color to centroid mean\n            let cent = centroids[i];\n            let current = colors[inds[i]];\n            let ind2 = getClosestRGB(cent.getAvgRGB(bias), allinds, colors, distfn);\n            let better = colors[ind2];\n            // if it's different, update the color\n            if (better != current) {\n                inds[i] = ind2;\n                nchanged++;\n                //console.log(iter, i, inds[i], ind2, score);\n            }\n            // don't use this color again\n            for (let j=0; j<colors.length; j++) {\n                if (colors[j] == better) { allinds[j] = -1; }\n            }\n        }\n        if (nchanged == 0) break;\n    }\n    // sort resulting colors by intensity\n    var result = inds.map((ind) => { return {ind, count:histo[ind]} });\n    result.sort((a,b) => intensity(colors[a.ind]) - intensity(colors[b.ind]));\n    return result;\n}\n\nexport function reducePalette(imageData: Uint32Array,\n    colors: Uint32Array,\n    count: number,\n    diversity: number,\n    distfn : RGBDistanceFunction) : Uint32Array \n{\n    if (colors.length == count) return new Uint32Array(colors);\n    var choices = reducePaletteChoices(imageData, colors, count, diversity, distfn);\n    console.log('reducePalette', colors.length, 'to', choices.length);\n    return new Uint32Array(choices.map((x) => colors[x.ind]));\n}\n\n//\n\nexport function getRGBADiff(rgbref: number, rgbimg: number) {\n    var err = [0,0,0];\n    for (var i=0; i<3; i++) {\n        var d = (rgbref & 0xff) - (rgbimg & 0xff);\n        err[i] = d;\n        rgbref >>= 8;\n        rgbimg >>= 8;\n    }\n    return err;\n}\n\nexport function getRGBAErrorAbsolute(rgbref: number, rgbimg: number) {\n    var mag = 0;\n    for (var i=0; i<3; i++) {\n        var d = (rgbref & 0xff) - (rgbimg & 0xff);\n        mag += sqr(d);\n        rgbref >>= 8;\n        rgbimg >>= 8;\n    }\n    return Math.sqrt(mag);\n}\n\n// TODO???\nexport function getRGBAErrorHue(rgbref: number, rgbimg: number) {\n    var r1 = ((rgbref>>0) & 0xff);\n    var g1 = ((rgbref>>8) & 0xff);\n    var b1 = ((rgbref>>16) & 0xff);\n    var r2 = ((rgbimg>>0) & 0xff);\n    var g2 = ((rgbimg>>8) & 0xff);\n    var b2 = ((rgbimg>>16) & 0xff);\n    var b = 256;\n    var avg1 = (r1+g1+b1)/3 + b;\n    var avg2 = (r2+g2+b2)/3 + b;\n    r1 /= avg1;\n    g1 /= avg1;\n    b1 /= avg1;\n    r2 /= avg2;\n    g2 /= avg2;\n    b2 /= avg2;\n    //var mag2 = Math.sqrt(sqr(r1-r2)*9 + sqr(g1-g2)*25 + sqr(b1-b2)*4);\n    //var mag2 = Math.sqrt(sqr(r1-r2)*3 + sqr(g1-g2)*5 + sqr(b1-b2)*3);\n    var mag2 = Math.sqrt(sqr(r1-r2) + sqr(g1-g2) + sqr(b1-b2))*256;\n    return mag2;\n}\n\nexport function getRGBAErrorPerceptual(rgbref: number, rgbimg: number) {\n    var r1 = ((rgbref>>0) & 0xff);\n    var g1 = ((rgbref>>8) & 0xff);\n    var b1 = ((rgbref>>16) & 0xff);\n    var r2 = ((rgbimg>>0) & 0xff);\n    var g2 = ((rgbimg>>8) & 0xff);\n    var b2 = ((rgbimg>>16) & 0xff);\n    var rmean = (r1 + r2) / 2;\n    var r = r1 - r2;\n    var g = g1 - g2;\n    var b = b1 - b2;\n    return Math.sqrt((((512+rmean)*r*r)/256) + 4*g*g + (((767-rmean)*b*b)/256));\n}\n\nexport function getRGBAErrorMax(rgbref: number, rgbimg: number) {\n    var r1 = ((rgbref>>0) & 0xff);\n    var g1 = ((rgbref>>8) & 0xff);\n    var b1 = ((rgbref>>16) & 0xff);\n    var r2 = ((rgbimg>>0) & 0xff);\n    var g2 = ((rgbimg>>8) & 0xff);\n    var b2 = ((rgbimg>>16) & 0xff);\n    return Math.max(Math.abs(r1-r2), Math.abs(g1-g2), Math.abs(b1-b2));\n}\n\nexport function intensity(rgb: number) {\n    return getRGBAErrorPerceptual(0, rgb);\n}\n\nexport const ERROR_FUNCTIONS = {\n    'perceptual': getRGBAErrorPerceptual,\n    'hue': getRGBAErrorHue,\n    'dist': getRGBAErrorAbsolute,\n    'max': getRGBAErrorMax,\n}\n\nexport function getRGBAErrorArr(a: number, b: number) {\n    var err = [0,0,0];\n    for (var i=0; i<3; i++) {\n        err[i] = ((a & 0xff) - (b & 0xff));\n        a >>= 8;\n        b >>= 8;\n    }\n    return err;\n}\n\nexport function getClosestRGB(rgb:number, inds:number[], pal:Uint32Array, distfn:RGBDistanceFunction) {\n    var best = 9999999;\n    var bestidx = -1;\n    for (var i=0; i<inds.length; i++) {\n        let ind = inds[i];\n        if (ind >= 0) {\n            var col = pal[inds[i]];\n            var score = distfn(rgb, col);\n            if (score < best) {\n                best = score;\n                bestidx = inds[i];\n            }\n        }\n    }\n    return bestidx;\n}\n\nexport function scoreRGBDistances(rgb:number, inds:number[], pal:Uint32Array, distfn:RGBDistanceFunction) {\n    let scores = [];\n    for (let i=0; i<inds.length; i++) {\n        var col = pal[inds[i]];\n        var score = distfn(rgb, col);\n        scores[i] = {i, ind:inds[i], rgb, col, score};\n    }\n    return scores;\n}\n\n//\n\nexport function getHistogram(inds: number[]) {\n    var histo = new Uint32Array(256);\n    inds.forEach((x) => histo[x]++);\n    return getChoices(histo);\n}\n\nexport function getChoices(histo: Uint32Array) {\n    var choices : {count:number,ind:number}[] = [];\n    for (var i=0; i<histo.length; i++) {\n        if (histo[i] > 0) {\n            choices.push({count:histo[i], ind:i});\n        }\n    }\n    choices.sort((a,b) => b.count - a.count);\n    return choices;\n}\n\nexport function rgb2tuple(arr: number[]) {\n    return arr.map((x) => [(x>>0) & 0xff, (x>>8) & 0xff, (x>>16) & 0xff]);\n}\n\nexport function convertToSystemPalette(pal: Uint32Array, syspal: Uint32Array | number[]) {\n    return pal.map((rgba) => syspal.indexOf(rgba & 0xffffff));\n}\n\n", "// PALETTES\n\nexport function RGB(r: number, g: number, b: number) {\n    return ((r & 0xff) << 0) | ((g & 0xff) << 8) | ((b & 0xff) << 16);\n}\n\nexport const MONO_RGB = [\n    RGB(0, 0, 0),\n    RGB(255, 255, 255)\n];\n\nexport const CMYK_RGB = [\n    RGB(0, 0, 0),\n    RGB(255, 128, 64),\n    RGB(64, 255, 128),\n    RGB(128, 64, 255),\n    RGB(255, 255, 255)\n];\n\nexport const VIC_NTSC_RGB = [\n    0x000000,\n    0xFFFFFF,\n    RGB(163, 64, 69),\n    RGB(125, 235, 228),\n    RGB(174, 70, 186),\n    RGB(94, 202, 84),\n    RGB(60, 57, 200),\n    RGB(255, 255, 111),\n    RGB(174, 96, 47),\n    RGB(110, 73, 0),\n    RGB(232, 122, 128),\n    RGB(92, 92, 92),\n    RGB(143, 143, 143),\n    RGB(179, 255, 167),\n    RGB(129, 126, 255),\n    RGB(199, 199, 199)\n];\n\n// https://www.pepto.de/projects/colorvic/\nexport const VIC_PAL_RGB = [\n    RGB(0x00, 0x00, 0x00),\n    RGB(0xff, 0xff, 0xff),\n    RGB(0x81, 0x33, 0x38),\n    RGB(0x75, 0xce, 0xc8),\n    RGB(0x8e, 0x3c, 0x97),\n    RGB(0x56, 0xac, 0x4d),\n    RGB(0x2e, 0x2c, 0x9b),\n    RGB(0xed, 0xf1, 0x71),\n    RGB(0x8e, 0x50, 0x29),\n    RGB(0x55, 0x38, 0x00),\n    RGB(0xc4, 0x6c, 0x71),\n    RGB(0x4a, 0x4a, 0x4a),\n    RGB(0x7b, 0x7b, 0x7b),\n    RGB(0xa9, 0xff, 0x9f),\n    RGB(0x70, 0x6d, 0xeb),\n    RGB(0xb2, 0xb2, 0xb2)\n];\n\n// https://en.wikipedia.org/wiki/List_of_8-bit_computer_hardware_graphics#VIC-20\nexport const VIC20_PAL_RGB = [\n    RGB(0x00,0x00,0x00),\n    RGB(0xff,0xff,0xff),\n    RGB(0x78,0x29,0x22),\n    RGB(0x87,0xd6,0xdd),\n    RGB(0xaa,0x5f,0xb6),\n    RGB(0x55,0xa0,0x49),\n    RGB(0x40,0x31,0x8d),\n    RGB(0xbf,0xce,0x72),\n    RGB(0xaa,0x74,0x49),\n    RGB(0xea,0xb4,0x89),\n    RGB(0xb8,0x69,0x62),\n    RGB(0xc7,0xff,0xff),\n    RGB(0xea,0x9f,0xf6),\n    RGB(0x94,0xe0,0x89),\n    RGB(0x80,0x71,0xcc),\n    RGB(0xff,0xff,0xb2)\n];\n\nexport const TMS9918_RGB = [\n    RGB(0, 0, 0),\n    RGB(0, 0, 0),\n    RGB(33, 200, 66),\n    RGB(94, 220, 120),\n    RGB(84, 85, 237),\n    RGB(125, 118, 252),\n    RGB(212, 82, 77),\n    RGB(66, 235, 245),\n    RGB(252, 85, 84),\n    RGB(255, 121, 120),\n    RGB(212, 193, 84),\n    RGB(230, 206, 128),\n    RGB(33, 176, 59),\n    RGB(201, 91, 186),\n    RGB(204, 204, 204),\n    RGB(255, 255, 255)\n];\n\nexport const NES_RGB = [\n    0x525252, 0xB40000, 0xA00000, 0xB1003D, 0x740069, 0x00005B, 0x00005F, 0x001840, 0x002F10, 0x084A08, 0x006700, 0x124200, 0x6D2800, 0x000000, 0x000000, 0x000000,\n    0xC4D5E7, 0xFF4000, 0xDC0E22, 0xFF476B, 0xD7009F, 0x680AD7, 0x0019BC, 0x0054B1, 0x006A5B, 0x008C03, 0x00AB00, 0x2C8800, 0xA47200, 0x000000, 0x000000, 0x000000,\n    0xF8F8F8, 0xFFAB3C, 0xFF7981, 0xFF5BC5, 0xFF48F2, 0xDF49FF, 0x476DFF, 0x00B4F7, 0x00E0FF, 0x00E375, 0x03F42B, 0x78B82E, 0xE5E218, 0x787878, 0x000000, 0x000000,\n    0xFFFFFF, 0xFFF2BE, 0xF8B8B8, 0xF8B8D8, 0xFFB6FF, 0xFFC3FF, 0xC7D1FF, 0x9ADAFF, 0x88EDF8, 0x83FFDD, 0xB8F8B8, 0xF5F8AC, 0xFFFFB0, 0xF8D8F8, 0x000000, 0x000000\n];\n\nexport const AP2HIRES_RGB = [\n    RGB(0, 0, 0),\n    RGB(255, 68, 253),\n    RGB(20, 245, 60),\n    RGB(20, 207, 253),\n    RGB(255, 106, 60),\n    RGB(255, 255, 255)\n];\n\nexport const AP2LORES_RGB = [\n    RGB(0, 0, 0),\n    RGB(227, 30, 96),\n    RGB(96, 78, 189),\n    RGB(255, 68, 253),\n    RGB(0, 163, 96),\n    RGB(156, 156, 156),\n    RGB(20, 207, 253),\n    RGB(208, 195, 255),\n    RGB(96, 114, 3),\n    RGB(255, 106, 60),\n    RGB(156, 156, 156),\n    RGB(255, 160, 208),\n    RGB(20, 245, 60),\n    RGB(208, 221, 141),\n    RGB(114, 255, 208),\n    RGB(255, 255, 255)\n];\n\nexport const ASTROCADE_RGB = [0, 2368548, 4737096, 7171437, 9539985, 11974326, 14342874, 16777215, 12255269, 14680137, 16716142, 16725394, 16734903, 16744155, 16753663, 16762879, 11534409, 13959277, 16318866, 16721334, 16730842, 16740095, 16749311, 16758783, 10420330, 12779662, 15138995, 16718039, 16727291, 16736767, 16745983, 16755199, 8847495, 11206827, 13631696, 15994612, 16724735, 16733951, 16743423, 16752639, 6946975, 9306307, 11731175, 14092287, 16461055, 16732415, 16741631, 16751103, 4784304, 7143637, 9568505, 11929087, 14297599, 16731647, 16741119, 16750335, 2425019, 4784352, 7209215, 9570047, 12004095, 14372863, 16741375, 16750847, 191, 2359523, 4718847, 7146495, 9515263, 11949311, 14318079, 16752127, 187, 224, 2294015, 4658431, 7092735, 9461247, 11895551, 14264063, 176, 213, 249, 2367999, 4736511, 7105279, 9539327, 11908095, 159, 195, 3303, 209151, 2577919, 4946431, 7380735, 9749247, 135, 171, 7888, 17140, 681983, 3050495, 5484543, 7853311, 106, 3470, 12723, 22231, 31483, 1548031, 3916799, 6285311, 73, 8557, 17810, 27318, 36570, 373759, 2742271, 5176575, 4389, 13641, 23150, 32402, 41911, 51163, 2026495, 4456447, 9472, 18724, 27976, 37485, 46737, 56246, 1834970, 4194303, 14080, 23296, 32803, 42055, 51564, 60816, 2031541, 4456409, 18176, 27648, 36864, 46116, 55624, 392556, 2752401, 5177269, 21760, 30976, 40192, 49667, 58919, 1572683, 3932016, 6291348, 24320, 33536, 43008, 52224, 716810, 3079982, 5504851, 7864183, 25856, 35328, 44544, 250368, 2619136, 4980503, 7405371, 9764703, 26624, 35840, 45312, 2413824, 4782336, 7143173, 9568041, 11927374, 26112, 35584, 2338560, 4707328, 7141376, 9502464, 11927326, 14286659, 24832, 2393344, 4762112, 7196160, 9564928, 11992832, 14352155, 16711487, 2447360, 4815872, 7250176, 9618688, 12052992, 14417664, 16776990, 16777027, 4803328, 7172096, 9606144, 11974912, 14343424, 16776965, 16777001, 16777038, 6962176, 9330688, 11764992, 14133504, 16502272, 16773655, 16777019, 16777055, 8858112, 11226880, 13660928, 16029440, 16759818, 16769070, 16777043, 16777079, 10426112, 12794624, 15163392, 16745475, 16754727, 16764235, 16773488, 16777108, 11534848, 13969152, 16337664, 16740388, 16749640, 16759148, 16768401, 16777141, 12255232, 14684928, 16725795, 16735047, 16744556, 16753808, 16763317, 16772569];\n\nexport const VCS_RGB = [\n    0x000000, 0x000000, 0x404040, 0x404040, 0x6c6c6c, 0x6c6c6c, 0x909090, 0x909090, 0xb0b0b0, 0xb0b0b0, 0xc8c8c8, 0xc8c8c8, 0xdcdcdc, 0xdcdcdc, 0xf4f4f4, 0xf4f4f4,\n    0x004444, 0x004444, 0x106464, 0x106464, 0x248484, 0x248484, 0x34a0a0, 0x34a0a0, 0x40b8b8, 0x40b8b8, 0x50d0d0, 0x50d0d0, 0x5ce8e8, 0x5ce8e8, 0x68fcfc, 0x68fcfc,\n    0x002870, 0x002870, 0x144484, 0x144484, 0x285c98, 0x285c98, 0x3c78ac, 0x3c78ac, 0x4c8cbc, 0x4c8cbc, 0x5ca0cc, 0x5ca0cc, 0x68b4dc, 0x68b4dc, 0x78c8ec, 0x78c8ec,\n    0x001884, 0x001884, 0x183498, 0x183498, 0x3050ac, 0x3050ac, 0x4868c0, 0x4868c0, 0x5c80d0, 0x5c80d0, 0x7094e0, 0x7094e0, 0x80a8ec, 0x80a8ec, 0x94bcfc, 0x94bcfc,\n    0x000088, 0x000088, 0x20209c, 0x20209c, 0x3c3cb0, 0x3c3cb0, 0x5858c0, 0x5858c0, 0x7070d0, 0x7070d0, 0x8888e0, 0x8888e0, 0xa0a0ec, 0xa0a0ec, 0xb4b4fc, 0xb4b4fc,\n    0x5c0078, 0x5c0078, 0x74208c, 0x74208c, 0x883ca0, 0x883ca0, 0x9c58b0, 0x9c58b0, 0xb070c0, 0xb070c0, 0xc084d0, 0xc084d0, 0xd09cdc, 0xd09cdc, 0xe0b0ec, 0xe0b0ec,\n    0x780048, 0x780048, 0x902060, 0x902060, 0xa43c78, 0xa43c78, 0xb8588c, 0xb8588c, 0xcc70a0, 0xcc70a0, 0xdc84b4, 0xdc84b4, 0xec9cc4, 0xec9cc4, 0xfcb0d4, 0xfcb0d4,\n    0x840014, 0x840014, 0x982030, 0x982030, 0xac3c4c, 0xac3c4c, 0xc05868, 0xc05868, 0xd0707c, 0xd0707c, 0xe08894, 0xe08894, 0xeca0a8, 0xeca0a8, 0xfcb4bc, 0xfcb4bc,\n    0x880000, 0x880000, 0x9c201c, 0x9c201c, 0xb04038, 0xb04038, 0xc05c50, 0xc05c50, 0xd07468, 0xd07468, 0xe08c7c, 0xe08c7c, 0xeca490, 0xeca490, 0xfcb8a4, 0xfcb8a4,\n    0x7c1800, 0x7c1800, 0x90381c, 0x90381c, 0xa85438, 0xa85438, 0xbc7050, 0xbc7050, 0xcc8868, 0xcc8868, 0xdc9c7c, 0xdc9c7c, 0xecb490, 0xecb490, 0xfcc8a4, 0xfcc8a4,\n    0x5c2c00, 0x5c2c00, 0x784c1c, 0x784c1c, 0x906838, 0x906838, 0xac8450, 0xac8450, 0xc09c68, 0xc09c68, 0xd4b47c, 0xd4b47c, 0xe8cc90, 0xe8cc90, 0xfce0a4, 0xfce0a4,\n    0x2c3c00, 0x2c3c00, 0x485c1c, 0x485c1c, 0x647c38, 0x647c38, 0x809c50, 0x809c50, 0x94b468, 0x94b468, 0xacd07c, 0xacd07c, 0xc0e490, 0xc0e490, 0xd4fca4, 0xd4fca4,\n    0x003c00, 0x003c00, 0x205c20, 0x205c20, 0x407c40, 0x407c40, 0x5c9c5c, 0x5c9c5c, 0x74b474, 0x74b474, 0x8cd08c, 0x8cd08c, 0xa4e4a4, 0xa4e4a4, 0xb8fcb8, 0xb8fcb8,\n    0x003814, 0x003814, 0x1c5c34, 0x1c5c34, 0x387c50, 0x387c50, 0x50986c, 0x50986c, 0x68b484, 0x68b484, 0x7ccc9c, 0x7ccc9c, 0x90e4b4, 0x90e4b4, 0xa4fcc8, 0xa4fcc8,\n    0x00302c, 0x00302c, 0x1c504c, 0x1c504c, 0x347068, 0x347068, 0x4c8c84, 0x4c8c84, 0x64a89c, 0x64a89c, 0x78c0b4, 0x78c0b4, 0x88d4cc, 0x88d4cc, 0x9cece0, 0x9cece0,\n    0x002844, 0x002844, 0x184864, 0x184864, 0x306884, 0x306884, 0x4484a0, 0x4484a0, 0x589cb8, 0x589cb8, 0x6cb4d0, 0x6cb4d0, 0x7ccce8, 0x7ccce8, 0x8ce0fc, 0x8ce0fc\n];\n\nexport const CGA_RGB = [\n    0x000000, 0xAA0000, 0x00AA00, 0xAAAA00, 0x0000AA, 0xAA00AA, 0x0055AA, 0xAAAAAA,\n    0x555555, 0xFF5555, 0x55FF55, 0xFFFF55, 0x5555FF, 0xFF55FF, 0x55FFFF, 0xFFFFFF,\n];\n\nexport const CGA_RGB_1 = [0x000000, 0x00AA00, 0x0000AA, 0x0055AA];\nexport const CGA_RGB_2 = [0x000000, 0xAAAA00, 0xAA00AA, 0xAAAAAA];\nexport const CGA_RGB_3 = [0x000000, 0xAAAA00, 0x0000AA, 0xAAAAAA];\nexport const CGA_RGB_1H = [0x000000, 0x55FF55, 0x5555FF, 0x55FFFF];\nexport const CGA_RGB_2H = [0x000000, 0xFFFF55, 0xFF55FF, 0xFFFFFF];\nexport const CGA_RGB_3H = [0x000000, 0xFFFF00, 0x5555FF, 0xFFFFFF];\nexport const SMS_RGB = generateRGBPalette(2, 2, 2);\nexport const WILLIAMS_RGB = generateRGBPalette(3, 3, 2);\nexport const ATARIST_RGB = generateRGBPalette(3, 3, 3);\nexport const TELETEXT_RGB = generateRGBPalette(1, 1, 1);\n\nexport const ZXSPECTRUM_RGB = [ // GRB\n    RGB(0x00, 0x00, 0x00),  // 0x00 Black            // dark palette\n    RGB(0x01, 0x00, 0xCE),  // 0x01 Blue\n    RGB(0xCF, 0x01, 0x00),  // 0x02 Red\n    RGB(0xCF, 0x01, 0xCE),  // 0x03 Magenta\n    RGB(0x00, 0xCF, 0x15),  // 0x04 Green\n    RGB(0x01, 0xCF, 0xCF),  // 0x05 Cyan\n    RGB(0xCF, 0xCF, 0x15),  // 0x06 Yellow\n    RGB(0xCF, 0xCF, 0xCF),  // 0x07 White\n\n    RGB(0x00, 0x00, 0x00),  // 0x08 \"Bright\" Black   // bright palette\n    RGB(0x02, 0x00, 0xFD),  // 0x09 Bright Blue\n    RGB(0xFF, 0x02, 0x01),  // 0x0A Bright Red\n    RGB(0xFF, 0x02, 0xFD),  // 0x0B Bright Magenta\n    RGB(0x00, 0xFF, 0x1C),  // 0x0C Bright Green\n    RGB(0x02, 0xFF, 0xFF),  // 0x0D Bright Cyan\n    RGB(0xFF, 0xFF, 0x1D),  // 0x0E Bright Yellow\n    RGB(0xFF, 0xFF, 0xFF),  // 0x0F Bright White\n];\n\nexport const AMSTRAD_CPC_RGB = [\n    0x000000, 0x800090, 0xFF0000,\n    0x000080, 0x800080, 0xFF0080,\n    0x0000FF, 0x8000FF, 0xFF00FF,\n    0x008000, 0x808000, 0xFF8000,\n    0x008080, 0x808080, 0xFF8080,\n    0x0080FF, 0x8080FF, 0xFF80FF,\n    0x00FF00, 0x80FF00, 0xFFFF00,\n    0x00FF80, 0x80FF80, 0xFFFF80,\n    0x00FFFF, 0x80FFFF, 0xFFFFFF,\n];\n\n// TODO: should these be reversed?\nexport const PICO8_RGB = [\n    0x000000, //0, 0, 0 black\n    0x1D2B53, //29, 43, 83 dark-blue\n    0x7E2553, //126, 37, 83 dark-purple\n    0x008751, //0, 135, 81 dark-green\n    0xAB5236, //171, 82, 54 brown\n    0x5F574F, //95, 87, 79 dark-gray\n    0xC2C3C7, //194, 195, 199 light-gray\n    0xFFF1E8, //255, 241, 232 white\n    0xFF004D, //255, 0, 77 red\n    0xFFA300, //255, 163, 0 orange\n    0xFFEC27, //255, 236, 39 yellow\n    0x00E436, //0, 228, 54 green\n    0x29ADFF, //41, 173, 255 blue\n    0x83769C, //131, 118, 156 indigo\n    0xFF77A8, //255, 119, 168 pink\n    0xFFCCAA, //255, 204, 170 peach\n];\n\nexport const TIC80_RGB = [\n    0x140C1C,\n    0x442434,\n    0x30346D,\n    0x4E4A4F,\n    0x854C30,\n    0x346524,\n    0xD04648,\n    0x757161,\n    0x597DCE,\n    0xD27D2C,\n    0x8595A1,\n    0x6DAA2C,\n    0xD2AA99,\n    0x6DC2CA,\n    0xDAD45E,\n    0xDEEED6,\n];\n\n// TODO: https://geeks-world.github.io/articles/467811/index.html\nexport const CHANNELF_RGB = [\n    // background\n    /*\n    0xe0e0e0,\n    0x101010,\n    0x91ffa6,\n    0xced0ff,\n    */\n    // foreground\n    0xfcfcfc,\n    0xff3153,\n    0x02cc5d,\n    0x4b3ff3,\n];\n\nexport const GAMEBOY_GREEN_RGB = [\n    0x0f380f,\n    0x306230,\n    0x0fac8c,\n    0x0fccac,\n];\n\nexport const GAMEBOY_MONO_RGB = [\n    0x000000,\n    0x555555,\n    0xaaaaaa,\n    0xffffff,\n];\n\nexport const RGB_444 = generateRGBPalette(4, 4, 4);\nexport const GAMEBOY_COLOR_RGB = RGB_444;\nexport const AMIGA_OCS_COLOR_RGB = RGB_444;\nexport const IIGS_COLOR_RGB = RGB_444;\nexport const GAMEGEAR_COLOR_RGB = RGB_444;\n\nexport const MC6847_PALETTE0 = [\n    RGB(0x30, 0xd2, 0x00),    /* NTSC: RGB( 28, 213,  16), */   // green \n    RGB(0xf5, 0xf5, 0x80),    /* NTSC: RGB(226, 219,  15), */   // yellow\n    RGB(0x4c, 0x3a, 0xb4),    /* NTSC: RGB(  3,  32, 255), */   // blue  \n    RGB(0x9a, 0x32, 0x36),    /* NTSC: RGB(226,  32,  10), */   // red   \n];\n\nexport const MC6847_PALETTE1 = [\n    RGB(0xd8, 0xd8, 0xd8),    /* NTSC: RGB( 205, 219, 224), */  // buff    \n    RGB(0x41, 0xaf, 0x71),    /* NTSC: RGB(  22, 208, 226), */  // cyan    \n    RGB(0xd8, 0x6e, 0xf0),    /* NTSC: RGB( 203,  57, 226), */  // magenta \n    RGB(0xd4, 0x7f, 0x00),    /* NTSC: RGB( 204,  45,  16), */  // orange  \n];\n\nfunction generateRGBPalette(rr: number, gg: number, bb: number) {\n    var n = 1 << (rr + gg + bb);\n    var rs = 255 / ((1 << rr) - 1);\n    var gs = 255 / ((1 << gg) - 1);\n    var bs = 255 / ((1 << bb) - 1);\n    var pal = new Uint32Array(n);\n    for (var i = 0; i < n; i++) {\n        var r = (i & ((1 << rr) - 1));\n        var g = ((i >> rr) & ((1 << gg) - 1));\n        var b = ((i >> (rr + gg)) & ((1 << bb) - 1));\n        pal[i] = RGB(r * rs, g * gs, b * bs);\n    }\n    return pal;\n}\n", "import { DithertronSettings } from \"../common/types\";\nimport * as palettes from \"./palettes\";\n\nexport const SYSTEMS: (DithertronSettings | null)[] = [\n    {\n        id: 'c64.multi',\n        name: 'C-64 Multi',\n        width: 160,\n        height: 200,\n        scaleX: 0.936 * 2,\n        conv: 'VICII_Canvas',\n        pal: palettes.VIC_PAL_RGB,\n        block: { w:4, h:8, colors:4, xb:1, yb:2 },\n        cell: {w: 4, h: 8, msbToLsb: true },\n        paletteChoices:{background: true},        \n        cb: { w: 4, h: 8, xb: 1, yb: 2 },\n        param: { extra: 1 },\n        toNative: 'exportC64Multi',\n    },\n    {\n        id: 'c64.multi.fli',\n        name: 'C-64 Multi FLI (w/o bug)',\n        width: 160,\n        height: 200,\n        scaleX: 0.936 * 2,\n        conv: 'VICII_Canvas',\n        pal: palettes.VIC_PAL_RGB,\n        block: { w: 4, h: 1, colors: 4, xb: 1 },\n        paletteChoices:{ background: true },\n        cell: {w: 4, h: 8, msbToLsb: true },\n        cb: { w: 4, h: 8, xb: 1, yb: 2 },\n        param: { extra: 1 },\n        fli: { bug: false, blankLeft: false, blankRight: false, blankColumns: 3 },\n        toNative: 'exportC64Multi',\n    },\n    {\n        id: 'c64.multi.fli.bug',\n        name: 'C-64 Multi FLI (with bug)',\n        width: 160,\n        height: 200,\n        scaleX: 0.936 * 2,\n        conv: 'VICII_Canvas',\n        pal: palettes.VIC_PAL_RGB,\n        block: { w: 4, h: 1, colors: 4, xb: 1 },\n        cell: {w: 4, h: 8, msbToLsb: true },\n        paletteChoices: { background: true },\n        cb: { w: 4, h: 8, xb: 1, yb: 2 },\n        param: { extra: 1 },\n        fli: { bug: true, blankLeft: false, blankRight: false, blankColumns: 3 },\n        toNative: 'exportC64Multi',\n    },\n    {\n        id: 'c64.multi.fli.blank.left',\n        name: 'C-64 Multi FLI (Left blank)',\n        width: 160,\n        height: 200,\n        scaleX: 0.936 * 2,\n        conv: 'VICII_Canvas',\n        pal: palettes.VIC_PAL_RGB,\n        block: { w: 4, h: 1, colors: 4, xb: 1 },\n        cell: {w: 4, h: 8, msbToLsb: true },\n        paletteChoices: { background: true },\n        cb: { w: 4, h: 8, xb: 1, yb: 2 },\n        param: { extra: 1 },\n        fli: { bug: false, blankLeft: true, blankRight: false, blankColumns: 3 },\n        toNative: 'exportC64Multi',\n    },\n    {\n        id: 'c64.multi.fli.blank',\n        name: 'C-64 Multi FLI (L/R blank)',\n        width: 160,\n        height: 200,\n        scaleX: 0.936 * 2,\n        conv: 'VICII_Canvas',\n        pal: palettes.VIC_PAL_RGB,\n        block: { w: 4, h: 1, colors: 4, xb: 1 },\n        cell: {w: 4, h: 8, msbToLsb: true },\n        paletteChoices: { background:true },\n        cb: { w: 4, h: 8, xb: 1, yb: 2 },\n        param: { extra: 1 },\n        fli: { bug: false, blankLeft: true, blankRight: true, blankColumns: 3 },\n        toNative: 'exportC64Multi',\n    },\n    {\n        id: 'c64.hires',\n        name: 'C-64 Hires',\n        width: 320,\n        height: 200,\n        scaleX: 0.936,\n        conv: 'VICII_Canvas',\n        pal: palettes.VIC_PAL_RGB,\n        block: { w: 8, h: 8, colors: 2 },\n        cell: {w: 8, h: 8, msbToLsb: true },\n        param: { extra: 1 },\n        toNative: 'exportC64Hires',\n    },\n    {\n        id: 'c64.hires.fli',\n        name: 'C-64 Hires FLI (w/o bug)',\n        width: 320,\n        height: 200,\n        scaleX: 0.936,\n        conv: 'VICII_Canvas',\n        pal: palettes.VIC_PAL_RGB,\n        block: { w: 8, h: 1, colors: 2 },\n        cell: {w: 8, h: 8, msbToLsb: true },\n        param: { extra: 1 },\n        fli: { bug: false, blankLeft: false, blankRight: false, blankColumns: 3 },\n        toNative: 'exportC64Hires',\n    },\n    {\n        id: 'c64.hires.fli.bug',\n        name: 'C-64 Hires FLI (with bug)',\n        width: 320,\n        height: 200,\n        scaleX: 0.936,\n        conv: 'VICII_Canvas',\n        pal: palettes.VIC_PAL_RGB,\n        block: { w: 8, h: 1, colors: 2 },\n        cell: {w: 8, h: 8, msbToLsb: true },\n        param: { extra: 1 },\n        fli: { bug: true, blankLeft: false, blankRight: false, blankColumns: 3 },\n        toNative: 'exportC64Hires',\n    },\n    {\n        id: 'c64.hires.fli.blank',\n        name: 'C-64 Hires FLI (L/R blank)',\n        width: 320,\n        height: 200,\n        scaleX: 0.936,\n        conv: 'VICII_Canvas',\n        pal: palettes.VIC_PAL_RGB,\n        block: { w: 8, h: 1, colors: 2 },\n        cell: {w: 8, h: 8, msbToLsb: true },\n        param: { extra: 1 },\n        fli: { bug: false, blankLeft: true, blankRight: true, blankColumns: 3 },\n        toNative: 'exportC64Hires',\n    },\n    {\n        id: 'nes',\n        name: 'NES (4 color, 240 tiles)',\n        width: 160,\n        height: 96,\n        scaleX: 8 / 7,\n        conv: 'DitheringCanvas',\n        pal: palettes.NES_RGB,\n        reduce: 4,\n        toNative: 'exportNES',\n    },\n    {\n        id: 'msx',\n        name: 'MSX/Coleco (TMS9918A)',\n        width: 256,\n        height: 192,\n        conv: 'VDPMode2_Canvas',\n        pal: palettes.TMS9918_RGB,\n        block: { w: 8, h: 1, colors: 2 },\n        cell: {w: 8, h: 8, msbToLsb: true },\n        toNative: 'exportTMS9918',\n    },\n    {\n        id: 'apple2.hires',\n        name: 'Apple ][ (Hires)',\n        width: 140,\n        height: 192,\n        scaleX: 2,\n        conv: 'Apple2_Canvas',\n        pal: palettes.AP2HIRES_RGB,\n        block: { w: 7, h: 1, colors: 4 },\n        toNative: 'exportApple2HiresToHGR',\n    },\n    {\n        id: 'atari8.d',\n        name: 'Atari ANTIC (Mode D)',\n        width: 160,\n        height: 96,\n        scaleX: 0.8571,\n        conv: 'DitheringCanvas',\n        pal: palettes.VCS_RGB,\n        reduce: 4,\n        toNative: 'exportFrameBuffer',\n        exportFormat: { bpp: 2, brev: true },\n    },\n    {\n        id: 'atari8.f.10',\n        name: 'Atari ANTIC (Mode F/10)',\n        width: 80,\n        height: 192,\n        scaleX: 0.8571 * 4,\n        conv: 'DitheringCanvas',\n        pal: palettes.VCS_RGB,\n        reduce: 9,\n        toNative: 'exportFrameBuffer',\n        exportFormat: { bpp: 4, brev: true },\n    },\n    {\n        id: 'vcs',\n        name: 'Atari VCS',\n        width: 40,\n        height: 192,\n        scaleX: 6,\n        conv: 'DitheringCanvas',\n        pal: palettes.VCS_RGB,\n        reduce: 2,\n        toNative: 'exportVCSPlayfield',\n    },\n    {\n        id: 'vcs.color',\n        name: 'Atari VCS (Color)',\n        width: 40,\n        height: 192,\n        scaleX: 6,\n        conv: 'VCSColorPlayfield_Canvas',\n        pal: palettes.VCS_RGB,\n        toNative: 'exportVCSPlayfield',\n    },\n    {\n        id: 'astrocade',\n        name: 'Bally Astrocade',\n        width: 160,\n        height: 98,\n        scaleX: 1,\n        conv: 'DitheringCanvas',\n        pal: palettes.ASTROCADE_RGB,\n        reduce: 4,\n        toNative: 'exportFrameBuffer',\n        exportFormat: { bpp: 2, brev: true },\n    },\n    {\n        id: 'zx',\n        name: 'ZX Spectrum',\n        width: 256,\n        height: 192,\n        conv: 'ZXSpectrum_Canvas',\n        pal: palettes.ZXSPECTRUM_RGB,\n        block: { w: 8, h: 8, colors: 2 },\n        cell: { w: 8, h: 8, msbToLsb: true },\n        toNative: 'exportZXSpectrum',\n    },\n    {\n        id: 'zx.dark',\n        name: 'ZX Spectrum (dark only)',\n        width: 256,\n        height: 192,\n        conv: 'ZXSpectrum_Canvas',\n        pal: palettes.ZXSPECTRUM_RGB,\n        block: { w: 8, h: 8, colors: 2 },\n        cell: { w: 8, h: 8, msbToLsb: true },\n        paletteChoices: { colorsRange: { min: 0, max: 7 } },\n        toNative: 'exportZXSpectrum',\n    },\n    {\n        id: 'zx.bright',\n        name: 'ZX Spectrum (bright only)',\n        width: 256,\n        height: 192,\n        conv: 'ZXSpectrum_Canvas',\n        pal: palettes.ZXSPECTRUM_RGB,\n        block: { w: 8, h: 8, colors: 2 },\n        cell: { w: 8, h: 8, msbToLsb: true },\n        paletteChoices: { colorsRange: { min: 8, max: 15 } },\n        toNative: 'exportZXSpectrum',\n    },\n    {\n        id: 'zx.dark.bright',\n        name: 'ZX Spectrum (dark made bright only)',\n        width: 256,\n        height: 192,\n        conv: 'ZXSpectrum_Canvas',\n        pal: palettes.ZXSPECTRUM_RGB,\n        block: { w: 8, h: 8, colors: 2 },\n        cell: { w: 8, h: 8, msbToLsb: true },\n        paletteChoices: { aux: true, colorsRange: { min: 0, max: 7 } }, // aux is used to signal the special mode\n        toNative: 'exportZXSpectrum',\n    },\n    {\n        id: 'zx.bright.dark',\n        name: 'ZX Spectrum (bright made dark only)',\n        width: 256,\n        height: 192,\n        conv: 'ZXSpectrum_Canvas',\n        pal: palettes.ZXSPECTRUM_RGB,\n        block: { w: 8, h: 8, colors: 2 },\n        cell: { w: 8, h: 8, msbToLsb: true },\n        paletteChoices: { aux: true, colorsRange: { min: 8, max: 15 } }, // aux is used to signal the special mode\n        toNative: 'exportZXSpectrum',\n    },\n    {\n        id: 'cpc.mode0',\n        name: 'Amstrad CPC (mode 0)',\n        width: 160,\n        height: 200,\n        scaleX: 2,\n        conv: 'DitheringCanvas',\n        pal: palettes.AMSTRAD_CPC_RGB,\n        reduce: 16,\n        toNative: 'exportFrameBuffer',\n        exportFormat: { bpp: 4, yremap: [3, 80, 2048], bitremap: [7, 3, 5, 1, 6, 2, 4, 0] }\n    },\n    {\n        id: 'cpc.mode1',\n        name: 'Amstrad CPC (mode 1)',\n        width: 320,\n        height: 200,\n        scaleX: 1,\n        conv: 'DitheringCanvas',\n        pal: palettes.AMSTRAD_CPC_RGB,\n        reduce: 4,\n        toNative: 'exportFrameBuffer',\n        exportFormat: { bpp: 2, yremap: [3, 80, 2048], bitremap: [7, 3, 6, 2, 5, 1, 4, 0] }\n    },\n\n    // null == separator, systems with runnable source code are above\n    null,\n\n    {\n        id: 'vic20.hires',\n        name: 'VIC-20 Hires',\n        width: 160,\n        height: 160,\n        scaleX: 1.5,\n        conv: 'VICII_Canvas',\n        pal: palettes.VIC20_PAL_RGB,\n        block: { w: 8, h: 8, colors: 2 },           // can choose the background, or one foreground color\n        cell: {w: 8, h: 8, msbToLsb: true },\n        paletteChoices: {\n            background: true,                       // pixels can choose the background color\n            backgroundRange: { min: 0, max: 7 },    // (but with a reduced color palette)\n            colorsRange: { min: 0, max: 7 }         // pixels can only choose from a reduced color palette\n        },\n        toNative:'exportVicHires',\n    },\n    {\n        id: 'vic20.multi',\n        name: 'VIC-20 Multi',\n        width: 80,\n        height: 160,\n        scaleX: 3,\n        conv: 'VICII_Canvas',\n        pal: palettes.VIC20_PAL_RGB,\n        block: { w: 4, h: 8, colors: 4 },           // can choose background, aux, border and one foreground color\n        cell: {w: 4, h: 8, msbToLsb: true },\n        paletteChoices: {\n            background: true,                       // pixels can choose the background color\n            backgroundRange: { min: 0, max: 15 },\n            aux: true,                              // pixels can choose the aux color\n            auxRange: { min: 0, max: 15},\n            border: true,                           // pixels can choose the border color\n            borderRange: { min: 0, max: 7 },        // (but with a reduced palette)\n            colorsRange: { min: 0, max: 7 }         // a reduced palette applies to the pixel colors\n        },\n        toNative:'exportVicMulti',\n    },\n    {\n        id: 'nes4f',\n        name: 'NES (4 color, full screen)',\n        width: 256,\n        height: 240,\n        scaleX: 8 / 7,\n        conv: 'DitheringCanvas',\n        pal: palettes.NES_RGB,\n        reduce: 4,\n        toNative: 'exportNES',\n    },\n    {\n        id: 'nes5f',\n        name: 'NES (5 color, full screen)',\n        width: 256,\n        height: 240,\n        scaleX: 8 / 7,\n        conv: 'NES_Canvas',\n        pal: palettes.NES_RGB,\n        reduce: 5,\n        toNative: 'exportNES',\n    },\n    {\n        id: 'atari7800.160a',\n        name: 'Atari 7800 (160A)',\n        width: 160,\n        height: 240,\n        scaleX: 2,\n        conv: 'DitheringCanvas',\n        pal: palettes.VCS_RGB,\n        reduce: 4,\n    },\n    {\n        id: 'atari7800.160b',\n        name: 'Atari 7800 (160B)',\n        width: 160,\n        height: 240,\n        scaleX: 2,\n        conv: 'DitheringCanvas',\n        pal: palettes.VCS_RGB,\n        reduce: 12,\n    },\n    {\n        id: 'sms',\n        name: 'Sega Master System',\n        width: 176, // only 488 unique tiles max, otherwise 256x240\n        height: 144,\n        scaleX: 8 / 7,\n        conv: 'DitheringCanvas',\n        pal: palettes.SMS_RGB,\n        reduce: 16,\n    },\n    {\n        id: 'sms-gg',\n        name: 'Sega GameGear',\n        width: 160,\n        height: 144,\n        scaleX: 1.2,\n        conv: 'DitheringCanvas',\n        pal: palettes.GAMEGEAR_COLOR_RGB,\n        reduce: 16,\n    },\n    {\n        id: 'bbcmicro.mode2',\n        name: 'BBC Micro (mode 2)',\n        width: 160,\n        height: 256,\n        scaleX: 2,\n        conv: 'DitheringCanvas',\n        pal: palettes.TELETEXT_RGB,\n    },\n    {\n        id: 'apple2.lores',\n        name: 'Apple ][ (Lores)',\n        width: 40,\n        height: 48,\n        scaleX: 1.5,\n        conv: 'DitheringCanvas',\n        pal: palettes.AP2LORES_RGB,\n        toNative: 'exportFrameBuffer',\n        exportFormat: { bpp: 4 },\n    },\n    {\n        id: 'apple2.dblhires',\n        name: 'Apple ][ (Double-Hires)',\n        width: 140,\n        height: 192,\n        scaleX: 2,\n        conv: 'DitheringCanvas',\n        pal: palettes.AP2LORES_RGB,\n    },\n    {\n        id: 'appleiigs.320.16',\n        name: 'Apple IIGS (16 colors)',\n        width: 320,\n        height: 200,\n        conv: 'DitheringCanvas',\n        pal: palettes.IIGS_COLOR_RGB,\n        reduce: 16,\n    },\n    {\n        id: 'channelf',\n        name: 'Fairchild Channel F',\n        width: 102,\n        height: 58,\n        conv: 'DitheringCanvas',\n        pal: palettes.CHANNELF_RGB,\n        reduce: 4, // TODO: https://geeks-world.github.io/articles/467811/index.html\n    },\n    {\n        id: 'mac',\n        name: 'Mac 128K',\n        width: 512,\n        height: 342,\n        conv: 'DitheringCanvas',\n        pal: palettes.MONO_RGB,\n    },\n    {\n        id: 'x86.cga.04h.1',\n        name: 'PC CGA (Mode 04h, palette 1)',\n        width: 320,\n        height: 200,\n        scaleX: 200 / 320 * 1.37,\n        conv: 'DitheringCanvas',\n        pal: palettes.CGA_RGB_1,\n        toNative: 'exportFrameBuffer',\n        exportFormat: { bpp: 1, np: 2 },\n    },\n    {\n        id: 'x86.cga.04h.1B',\n        name: 'PC CGA (Mode 04h, bright 1)',\n        width: 320,\n        height: 200,\n        scaleX: 200 / 320 * 1.37,\n        conv: 'DitheringCanvas',\n        pal: palettes.CGA_RGB_1H,\n        toNative: 'exportFrameBuffer',\n        exportFormat: { bpp: 1, np: 2 },\n    },\n    {\n        id: 'x86.cga.04h.2',\n        name: 'PC CGA (Mode 04h, palette 2)',\n        width: 320,\n        height: 200,\n        scaleX: 200 / 320 * 1.37,\n        conv: 'DitheringCanvas',\n        pal: palettes.CGA_RGB_2,\n        toNative: 'exportFrameBuffer',\n        exportFormat: { bpp: 1, np: 2 },\n    },\n    {\n        id: 'x86.cga.04h.2B',\n        name: 'PC CGA (Mode 04h, bright 2)',\n        width: 320,\n        height: 200,\n        scaleX: 200 / 320 * 1.37,\n        conv: 'DitheringCanvas',\n        pal: palettes.CGA_RGB_2H,\n        toNative: 'exportFrameBuffer',\n        exportFormat: { bpp: 1, np: 2 },\n    },\n    {\n        id: 'x86.cga.05h',\n        name: 'PC CGA (Mode 05h)',\n        width: 320,\n        height: 200,\n        scaleX: 200 / 320 * 1.37,\n        conv: 'DitheringCanvas',\n        pal: palettes.CGA_RGB_3,\n        toNative: 'exportFrameBuffer',\n        exportFormat: { bpp: 1, np: 2 },\n    },\n    {\n        id: 'x86.cga.05h.B',\n        name: 'PC CGA (Mode 05h, bright)',\n        width: 320,\n        height: 200,\n        scaleX: 200 / 320 * 1.37,\n        conv: 'DitheringCanvas',\n        pal: palettes.CGA_RGB_3H,\n        toNative: 'exportFrameBuffer',\n        exportFormat: { bpp: 1, np: 2 },\n    },\n    {\n        id: 'x86.ega.0dh',\n        name: 'PC EGA (Mode 0Dh)',\n        width: 320,\n        height: 200,\n        scaleX: 200 / 320 * 1.37,\n        conv: 'DitheringCanvas',\n        pal: palettes.CGA_RGB,\n        toNative: 'exportFrameBuffer',\n        exportFormat: { bpp: 1, np: 4 },\n    },\n    {\n        id: 'x86.ega.10h',\n        name: 'PC EGA (Mode 10h)',\n        width: 640,\n        height: 350,\n        scaleX: 350 / 640 * 1.37,\n        conv: 'DitheringCanvas',\n        pal: palettes.CGA_RGB,\n        toNative: 'exportFrameBuffer',\n        exportFormat: { bpp: 1, np: 4 },\n    },\n    {\n        id: 'williams',\n        name: 'Williams Arcade',\n        width: 304,\n        height: 256,\n        conv: 'DitheringCanvas',\n        pal: palettes.WILLIAMS_RGB,\n        reduce: 16,\n    },\n    {\n        id: 'pico8',\n        name: 'PICO-8',\n        width: 128,\n        height: 128,\n        conv: 'DitheringCanvas',\n        pal: palettes.PICO8_RGB,\n    },\n    {\n        id: 'tic80',\n        name: 'TIC-80',\n        width: 240,\n        height: 136,\n        conv: 'DitheringCanvas',\n        pal: palettes.TIC80_RGB,\n    },\n    {\n        id: 'gb',\n        name: 'Game Boy Classic',\n        width: 160,\n        height: 144,\n        scaleX: 10 / 9,\n        conv: 'DitheringCanvas',\n        pal: palettes.GAMEBOY_GREEN_RGB,\n    },\n    /*\n    {\n        id:'gbc',\n        name:'Game Boy Color',\n        width:160,\n        height:144,\n        aspect:1,\n        conv:'DitheringCanvas',\n        pal:GAMEBOY_COLOR_RGB,\n        reduce:32,\n    },\n    */\n    {\n        id: 'amiga.lores',\n        name: 'Amiga (Lores)',\n        width: 320,\n        height: 256,\n        conv: 'DitheringCanvas',\n        pal: palettes.AMIGA_OCS_COLOR_RGB,\n        reduce: 32,\n        //toNative:'exportFrameBuffer',\n        //exportFormat:{bpp:1,brev:true,np:5},\n    },\n    {\n        id: 'amiga.lores.ham6',\n        name: 'Amiga (Lores, HAM6)',\n        width: 320,\n        height: 256,\n        conv: 'HAM6_Canvas',\n        pal: palettes.AMIGA_OCS_COLOR_RGB,\n        reduce: 16,\n        extraColors: 48,\n        //toNative:'exportFrameBuffer',\n        //exportFormat:{bpp:1,brev:true,np:6},\n    },\n    {\n        id: 'cx16.lores',\n        name: 'Commander X16 (Lores)',\n        width: 320,\n        height: 240,\n        scaleX: 1,\n        conv: 'DitheringCanvas',\n        pal: palettes.AMIGA_OCS_COLOR_RGB,\n        reduce: 256\n    },\n    {\n        id: 'cx16.hires',\n        name: 'Commander X16 (Hires, cropped)',\n        width: 640,\n        height: 400,\n        scaleX: 1,\n        conv: 'DitheringCanvas',\n        pal: palettes.AMIGA_OCS_COLOR_RGB,\n        reduce: 16\n    },\n    {\n        id: 'compucolor',\n        name: 'Compucolor',\n        width: 160,\n        height: 192,\n        scaleX: 1.6,\n        conv: 'Compucolor_Canvas',\n        pal: palettes.ZXSPECTRUM_RGB,\n        block: { w: 2, h: 4, colors: 2 },\n    },\n    // https://www.bighole.nl//pub/mirror/homepage.ntlworld.com/kryten_droid/teletext/spec/teletext_spec_1974.htm\n    {\n        id: 'teletext',\n        name: 'Teletext',\n        width: 40 * 2,\n        height: 24 * 3,\n        scaleX: 4 / 3,\n        conv: 'Teletext_Canvas',\n        pal: palettes.TELETEXT_RGB,\n        block: { w: 2, h: 3, colors: 2 },\n    },\n    {\n        id: 'atarist',\n        name: 'Atari ST',\n        width: 320,\n        height: 200,\n        scaleX: 1,\n        conv: 'DitheringCanvas',\n        pal: palettes.ATARIST_RGB,\n        reduce: 16\n    },\n    {\n        id: 'MC6847.CG2.palette0',\n        name: 'MC6847 (CG2, palette 0)',\n        width: 128,\n        height: 64,\n        scaleX: 1 / 1.3,\n        conv: 'DitheringCanvas',\n        pal: palettes.MC6847_PALETTE0,\n        reduce: 4,\n        toNative: 'exportMC6847'\n    },\n    {\n        id: 'MC6847.CG2.palette1',\n        name: 'MC6847 (CG2, palette 1)',\n        width: 128,\n        height: 64,\n        scaleX: 1 / 1.3,\n        conv: 'DitheringCanvas',\n        pal: palettes.MC6847_PALETTE1,\n        reduce: 4,\n        toNative: 'exportMC6847'\n    },\n    {\n        id: 'MC6847.CG3.palette0',\n        name: 'MC6847 (CG3, palette 0)',\n        width: 128,\n        height: 96,\n        scaleX: 1 / 1.3 * 96 / 64,\n        conv: 'DitheringCanvas',\n        pal: palettes.MC6847_PALETTE0,\n        reduce: 4,\n        toNative: 'exportMC6847'\n    },\n    {\n        id: 'MC6847.CG3.palette1',\n        name: 'MC6847 (CG3, palette 1)',\n        width: 128,\n        height: 96,\n        scaleX: 1 / 1.3 * 96 / 64,\n        conv: 'DitheringCanvas',\n        pal: palettes.MC6847_PALETTE1,\n        reduce: 4,\n        toNative: 'exportMC6847'\n    },\n    {\n        id: 'MC6847.CG6.palette0',\n        name: 'MC6847 (CG6, palette 0)',\n        width: 128,\n        height: 192,\n        scaleX: 1 / 1.3 * 192 / 64,\n        conv: 'DitheringCanvas',\n        pal: palettes.MC6847_PALETTE0,\n        reduce: 4,\n        toNative: 'exportMC6847'\n    },\n    {\n        id: 'MC6847.CG6.palette1',\n        name: 'MC6847 (CG6, palette 1)',\n        width: 128,\n        height: 192,\n        scaleX: 1 / 1.3 * 192 / 64,\n        conv: 'DitheringCanvas',\n        pal: palettes.MC6847_PALETTE1,\n        reduce: 4,\n        toNative: 'exportMC6847'\n    },\n    {\n        id: 'vcs.48',\n        name: 'Atari VCS (48x48 bitmap)',\n        width: 48,\n        height: 48,\n        conv: 'DitheringCanvas',\n        pal: palettes.VCS_RGB,\n        reduce: 2,\n    },\n    {\n        id: 'pce.256x240',\n        name: 'PC Engine (256x240)',\n        width: 256,\n        height: 240,\n        scaleX: 5 / 4,\n        conv: 'DitheringCanvas',\n        pal: palettes.ATARIST_RGB,\n        reduce: 16,\n    },\n];\n\nexport var SYSTEM_LOOKUP: { [id: string]: DithertronSettings } = {};\nSYSTEMS.forEach((sys) => { if (sys) SYSTEM_LOOKUP[sys.id || sys.name] = sys; });\n\n", "import { getChoices, reducePaletteChoices, ColorChoice } from \"../common/color\";\nimport { PaletteChoices, PaletteRange  } from \"../common/types\";\nimport { BaseDitheringCanvas, BasicParamDitherCanvas, OneColor_Canvas, ParamDitherCanvas, TwoColor_Canvas } from \"./basecanvas\";\nimport { MAX_ITERATE_COUNT } from \"./dithertron\";\nimport { range } from \"../common/util\";\n\nexport class DitheringCanvas extends BaseDitheringCanvas {\n    // just a wrapper for the base class so we can find it\n}\n\nexport class Teletext_Canvas extends OneColor_Canvas {\n    w = 2;\n    h = 3;\n}\nexport class VDPMode2_Canvas extends TwoColor_Canvas {\n    w = 8;\n    h = 1;\n}\nexport class VCSColorPlayfield_Canvas extends TwoColor_Canvas {\n    w = 40;\n    h = 1;\n}\nexport class Compucolor_Canvas extends TwoColor_Canvas {\n    w = 2;\n    h = 4;\n}\n\nexport class Apple2_Canvas extends TwoColor_Canvas {\n    w = 7;\n    h = 1;\n    allColors = [0, 1, 2, 3, 4, 5];\n    guessParam(p: number) {\n        var offset = p * this.w;\n        var colors = this.allColors;\n        var histo = new Uint32Array(16);\n        for (var i = 0; i < this.w; i++) {\n            var c1 = this.indexed[offset + i] | 0;\n            histo[c1] += 100;\n            var c2 = this.getClosest(this.alt[offset + i] | 0, colors);\n            histo[c2] += 1 + this.noise;\n        }\n        var hibit = histo[3] + histo[4] > histo[1] + histo[2];\n        this.params[p] = hibit ? 1 : 0;\n    }\n    getValidColors(offset: number) {\n        var i = Math.floor(offset / this.w);\n        var hibit = (this.params[i] & 1) != 0;\n        // hi bit set? (covers 2 bytes actually)\n        if (hibit)\n            return [0, 3, 4, 5];\n        else\n            return [0, 1, 2, 5];\n    }\n}\n\nnamespace VICII_Canvas_Details {\n    export interface UseBlockInfo {\n        w: number;\n        h: number;\n        xb?: number;\n        yb?: number;\n    };\n\n    export let prepare = function (defaults: UseBlockInfo, block?: UseBlockInfo): UseBlockInfo {\n        if (block === undefined) {\n            return prepare(defaults, defaults);\n        }\n        let result: UseBlockInfo = { ...block };\n        result.xb = (block.xb === undefined ? 0 : block.xb);\n        result.yb = (block.yb === undefined ? 0 : block.yb);\n        return result;\n    }\n}\n\nexport class VICII_Canvas extends ParamDitherCanvas {\n    // FLI allows for the color choices of pixel values %01/%10 to change PER row as the\n    // screen address where the color information is stored is changeable for each scan line\n    // BUT the color ram for the %11 is not an address that can be changed so the\n    // color ram applies to the entire 4x8 macro block\n\n    // pixel values (for multi-mode):\n    // %00 = background color (global value)\n    // %01 = upper nybble of screen block (changeable per row 4x8 block size, 4x1 in FLI)\n    // %10 = lower nybble of screen block (changeable only at the 4x8 block size)\n    // %11 = lower nybble of color ram\n\n    // pixel values (for hires-mode):\n    // %0 = background color choice (stored in screen lower nybble, changeable per 8x8 block, 8x1 in FLI)\n    // %1 = color choice (stored in screen upper nybble, changeable per 8x8 block, 8x1 in FLI)\n    b: VICII_Canvas_Details.UseBlockInfo;\n    colors: number;\n\n    paletteChoices: PaletteChoices = {};\n    pixelPaletteChoices: number[];\n\n    // NOTE: cb = \"color block\"\n    //\n    // In multi-color mode, the pixel index color choices are either %00 for background,\n    // %10 lower nybble screen value, %01 for upper nybble screen value, and %11 for\n    // the color block. The color block values are kept as a separate set of parameters\n    // at the end of the screen color choice parameters as they are an entirely\n    // independent color choice data set which is immovable in memory (unlike screen\n    // ram which is address moveable). The block size of the color blocks (4x8) happen to\n    // be the same size as the screen color choice block sizes (4x8) in multi-color mode.\n    // However, in multi-color FLI mode the screen color choices have per row color\n    // choices (4x1) even though the color block sizes remain the same size (4x8).\n    //\n    // This the reason the color block parameters are split from the screen parameter\n    // color choices as they are not always a 1:1 pairing.\n    useCb: boolean;\n    cb: VICII_Canvas_Details.UseBlockInfo;\n    cbOffset: number = 0;   // the offset into the params array for the color block ram\n    extra: number = 0;\n\n    bitsPerColor: number;\n    pixelsPerByte: number;\n\n    fliMode: boolean = false;\n\n    // FLI mode causes a VIC bug to appear coined the \"fli bug\". The issue is that\n    // when $D011 is forced into a \"bad line\" condition which forces the VIC to\n    // refetch color data and the CPU stalls the VIC long enough that exactly 3 character\n    // values wide lack proper color block data (they instead use left over color block\n    // data from the previous raster line).\n    //\n    // Whenever the vertical scroll register $D011 lower 3-bits match the current\n    // raster line number's lower 3 bits, the VIC is forced to re-fetch color block data.\n    // Under normal VIC/CPU conditions this happens every 8 raster lines because the\n    // vertical scroll value has 8 possible values and thus the raster line bits match\n    // the vertical scroll bits once in every 8 raster lines.\n    //\n    // Normally the VIC detects this condition while still inside the H-blank thus no\n    // problem occurs. However, the FLI logic needs to swap the $D011 register's scroll\n    // value every single scan line and re-adjust the screen data memory address, then\n    // loop. This forces the VIC to enter a \"bad line\" state at improper timing than\n    // normal conditions and the VIC must re-fetch the color block data. Worse, the\n    // CPU timings require the VIC wait a 3-cycle handoff period prior to fetching the\n    // color block data. Thus while the VIC is waiting, it still needs to display some\n    // color (without having fetched the proper color). During this time the color block\n    // internal values are set to 0xff (which has a fixed color of light grey).\n    //\n    // Thus in FLI mode, one recommended solution is to \"blank\" out the first three columns\n    // with the background color on the left side of the screen. The right side is fine\n    // but it too can be blanked to have a most balanced and centered picture display.\n    fliBug: boolean = true;\n    fliBugCbColor: number = 8; // orange\n    fliBugChoiceColor: number = 15; // light grey\n    blankLeftScreenFliBugArea: boolean = false;\n    blankRightScreenMirrorFliBugArea: boolean = false;\n    blankFliBugColumnCount: number = 0;\n\n    // values chosen base on image\n    bgColor: number = 0;\n    auxColor: number = 0;\n    borderColor: number = 0;\n    globalValid: number[] = [];\n\n    // state machine for guessing\n    lastComputedCb: number = 0;\n\n    // TODO: choose global colors before init?\n    init() {\n        // adopt the system settings\n        this.b = VICII_Canvas_Details.prepare(this.sys.block, this.sys.block);\n        this.cb = VICII_Canvas_Details.prepare(this.sys.block, this.sys.cb);\n\n        this.useCb = this.sys.cb === undefined ? false : true;\n        this.colors = this.sys.block.colors;\n        this.extra = this.sys.param === undefined ? 0 : this.sys.param.extra;\n\n        // assume the background color is choosable (unless overridden)\n        this.preparePaletteChoices(this.sys.paletteChoices);\n\n        if (this.sys.fli != undefined) {\n            this.fliMode = true;\n            this.fliBug = this.sys.fli.bug;\n            this.blankLeftScreenFliBugArea = this.sys.fli.blankLeft;\n            this.blankRightScreenMirrorFliBugArea = this.sys.fli.blankRight;\n            this.blankFliBugColumnCount = this.sys.fli.blankColumns;\n        }\n\n        // find global colors\n        this.prepareGlobalColorChoices();\n\n        this.bitsPerColor = Math.ceil(Math.log2(this.colors));\n        this.pixelsPerByte = Math.floor(8 / this.bitsPerColor);\n\n        // offset into the first byte of the color ram (which is after the screen data)\n        this.cbOffset = (this.width / this.b.w * this.height / this.b.h);\n        this.params = new Uint32Array(this.cbOffset + ((this.width / this.cb.w * this.height / this.cb.h) * (this.useCb ? 1 : 0)) + this.extra);\n\n        // console.log('blocks',this.b, this.cb, this.useCb, this.bitsPerColor, this.pixelsPerByte);\n        // console.log('palette',this.paletteChoices);\n        // console.log('colors',this.colors, this.globalValid, this.bgColor, this.auxColor, this.borderColor);\n        // console.log('choices',this.pixelPaletteChoices);\n        // console.log('picture', this.width, this.height, this.cbOffset, this.params.length);\n\n        // fill params of sub-blocks\n        for (var i = 0; i < this.params.length - this.extra; i++) {\n            this.guessParam(i);\n        }\n\n        // extra parameter for global colors\n        if (this.extra > 0)\n            this.params[this.params.length - this.extra] = this.bgColor | (this.auxColor << 4) | (this.borderColor << 8);\n    }\n    preparePixelPaletteChoices(): void {\n        let count : number = this.paletteChoices.colorsRange.max - this.paletteChoices.colorsRange.min + 1;\n        let ind = new Array<number>(count);\n        for(let l = 0, i = this.paletteChoices.colorsRange.min; i < this.paletteChoices.colorsRange.min + count; ++l, ++i) {\n            ind[l] = i;\n        }\n        this.pixelPaletteChoices = ind;\n    }\n    preparePaletteChoices(options?: PaletteChoices):void {\n        console.assert(this.pal.length > 0);\n        if (options === undefined) {\n            this.paletteChoices.background = false;\n            this.paletteChoices.aux = false;\n            this.paletteChoices.border = false;\n            this.paletteChoices.backgroundRange = { min: 0, max: this.pal.length - 1 };\n            this.paletteChoices.auxRange = { min: 0, max: this.pal.length - 1 };\n            this.paletteChoices.borderRange = { min: 0, max: this.pal.length - 1 };\n            this.paletteChoices.colors = this.colors;\n            this.paletteChoices.colorsRange = { min: 0, max: this.pal.length - 1 };\n\n            this.preparePixelPaletteChoices();\n            return;\n        }\n        this.paletteChoices.background = options.background === undefined ? false : options.background;\n        this.paletteChoices.aux = options.aux === undefined ? false : options.aux;\n        this.paletteChoices.border = options.aux === undefined ? false : options.border;\n\n        this.paletteChoices.backgroundRange = options.backgroundRange === undefined ? { min: 0, max: this.pal.length - 1 } : options.backgroundRange;\n        this.paletteChoices.auxRange = options.auxRange === undefined ? { min: 0, max: this.pal.length - 1 } : options.auxRange;\n        this.paletteChoices.borderRange = options.borderRange === undefined ? { min: 0, max: this.pal.length - 1 } : options.borderRange;\n        this.paletteChoices.colorsRange = options.colorsRange === undefined ? { min: 0, max: this.pal.length - 1 } : options.colorsRange;\n\n        this.paletteChoices.colors = options.colors === undefined ?\n            (this.colors - (this.paletteChoices.background?1:0) - (this.paletteChoices.aux?1:0) - (this.paletteChoices.border?1:0)) :\n            options.colors;\n        this.paletteChoices.colorsRange = { min: 0, max: this.pal.length - 1 };\n        this.preparePixelPaletteChoices();\n\n        // some basic sanity checks\n        console.assert(this.pal.length > this.paletteChoices.backgroundRange.max - this.paletteChoices.backgroundRange.min);\n        console.assert(this.pal.length > this.paletteChoices.auxRange.max - this.paletteChoices.auxRange.min);\n        console.assert(this.pal.length > this.paletteChoices.borderRange.max - this.paletteChoices.borderRange.min);\n    }\n    chooseMin(available: boolean, range: PaletteRange, current?: number): number {\n        if (!available)\n            return current;\n        if (current === undefined)\n            return range.min;\n        return Math.min(current, range.min);\n    }\n    chooseMax(available: boolean, range: PaletteRange, current?: number): number {\n        if (!available)\n            return current;\n        if (current === undefined)\n            return range.max;\n        return Math.max(current, range.max);\n    }\n    prepareMinMax(background: boolean, aux: boolean, border: boolean): PaletteRange {\n        let chosenMin: number | undefined = this.chooseMin(background, this.paletteChoices.backgroundRange);\n        chosenMin = this.chooseMin(aux, this.paletteChoices.auxRange, chosenMin);\n        chosenMin = this.chooseMin(border, this.paletteChoices.borderRange, chosenMin);\n        //chosenMin = this.chooseMin(true, this.paletteChoices.colorsRange, chosenMin); // do not include pixel choices in this range\n        chosenMin = chosenMin === undefined ? 0 : chosenMin;\n\n        let chosenMax: number | undefined = this.chooseMax(background, this.paletteChoices.backgroundRange);\n        chosenMax = this.chooseMax(aux, this.paletteChoices.auxRange, chosenMax);\n        chosenMax = this.chooseMax(border, this.paletteChoices.borderRange, chosenMax);\n        //chosenMax = this.chooseMax(true, this.paletteChoices.colorsRange, chosenMax); // do not include pixel choices in this range\n        chosenMax = chosenMax === undefined ? (this.pal.length - 1) : chosenMax;\n\n        return {min: chosenMin, max: chosenMax};\n    }\n    prepareGlobalColorChoices(): void {\n        let range = this.prepareMinMax(true, true, true);\n        let palSubset = this.pal.slice(range.min, range.max + 1);\n\n        // by default the choices result is ranked by color intensity\n        let choices = reducePaletteChoices(\n            this.ref,\n            palSubset,\n            palSubset.length,  // rank the entire palette subset (because restricted palettes may have to fallback)\n            1,\n            this.errfn);\n\n        // Need a ranking based on color usage, because if the color\n        // is selectable by a pixel then the most prominent selectable\n        // color should be chosen (to not waste a color for intensity\n        // reasons when a color is most useful as a pixel color choice);\n        // but if the color is not selectable by the color then fallback\n        // to color intensity (based on which top N colors are the\n        // most likely to be compatible with the picture);\n        let histoRankedChoices = choices.slice(0, choices.length);\n        histoRankedChoices.sort((a,b) => b.count - a.count);\n\n        // these are the possible choices for colors\n        let ranges: { id: number, selectable: boolean, range: PaletteRange }[] = [\n            { id: 0, selectable: this.paletteChoices.background, range: this.paletteChoices.backgroundRange },\n            { id: 1, selectable: this.paletteChoices.aux, range: this.paletteChoices.auxRange },\n            { id: 2, selectable: this.paletteChoices.border, range: this.paletteChoices.borderRange }\n        ];\n\n        // sort by the follow criteria:\n        // 1. colors that can be selected by pixels have priority over those that do not\n        // 2. colors that have the most restricted palettes\n        // 3. by id (if all other choices are equal)\n        ranges.sort((a,b) =>\n            (a.selectable == b.selectable) ? \n                (((a.range.max - a.range.min) == (b.range.max - b.range.min)) ?\n                    a.id - b.id :\n                    (a.range.max - a.range.min) - (b.range.max - b.range.min)) :\n                (a.selectable ? -1 : 1));\n\n        let assignId = (choice: ColorChoice, option: { id: number, selectable: boolean, range: PaletteRange }) => {\n            let index = choice.ind + range.min; // palette might be a subset\n\n            // do not select the choice if the palette range restrictions do not allow it\n            if ((index < option.range.min) || (index > option.range.max))\n                return false;\n\n            switch (option.id) {\n                case 0: this.bgColor = index; break;\n                case 1: this.auxColor = index; break;\n                case 2: this.borderColor = index; break;\n            }\n            return true;\n        };\n\n        let findBestChoice = (searchList: ColorChoice[], altList: ColorChoice[], option: { id: number, selectable: boolean, range: PaletteRange }) => {\n            // based on the priority of the ranges, pick/assign a choice color to each\n            // option in the range, starting with the most important first (as\n            // defined by the sort order)\n            for (let c = 0; c < searchList.length; ++c) {\n                let choice = searchList[c];\n\n                // attempt to assign the choice to the color option\n                if (!assignId(choice, option))\n                    continue;   // if didn't get used, try next color\n\n                // find this color choice in the alternative array (so it can be removed)\n                let found = altList.findIndex((x) => x.ind == choice.ind);\n\n                // remove the entry from the alternatively ranked list\n                console.assert(found >= 0);\n                altList.splice(found, 1);\n\n                // prevent this choice from being used again\n                searchList.splice(c, 1);\n                break;\n            }\n        };\n\n        let firstNonSelectableColorFound = false;\n\n        // try to match a color choice with the options available\n        for (let i = 0; i < ranges.length; ++i) {\n            let option = ranges[i];\n\n            if ((!option.selectable) && (!firstNonSelectableColorFound)) {\n                // found all the required colors that can be chosen by a\n                // pixel so now re-rank the remaining color choices, putting\n                // the top N \"compatible\" based on picture histo usage at the\n                // top of the array, but sorted by intensity\n                // (where N is the number of remaining \"other\" colors to choose);\n                let topNChoices : { priority: number, choice: ColorChoice }[] = []\n                for (let c = 0; c < ranges.length - i; ++c) {\n                    if (c >= histoRankedChoices.length)\n                        continue; // make sure the colors are not exhausted\n\n                    // this color is high priority to pick\n                    let topChoice = histoRankedChoices[c];\n                    let priority = choices.findIndex((x) => x.ind == topChoice.ind);\n                    console.assert(priority >= 0);\n                    topNChoices.push({priority, choice: topChoice});\n                    // removing the choice from the list is okay because it's going to be\n                    // re-inserted at the top of the new choices list\n                    choices.splice(priority, 1);\n                }\n\n                // sort the top choices by intensity\n                topNChoices.sort((a,b) => a.priority - b.priority);\n\n                // put the top N at the front of the choices list\n                choices = (topNChoices.map((x) => x.choice)).concat(choices);\n                firstNonSelectableColorFound = true;\n            }\n\n            findBestChoice((option.selectable ? histoRankedChoices : choices), (option.selectable ? choices : histoRankedChoices), option);\n            // console.log(\"findBestChoice\", i, option, histoRankedChoices, choices);\n        }\n\n        // When in FLI mode, the FLI bug messes with the left side of the screen\n        // thus making the color choices limited. This attempts to make the\n        // error are less obvious by tweaking the background and border colors.\n        if ((this.fliMode) && ((this.fliBug) || (this.blankLeftScreenFliBugArea) || (this.blankRightScreenMirrorFliBugArea)))  {\n            if (!this.paletteChoices.background) {\n                this.bgColor = this.fliBugChoiceColor;\n                this.borderColor = this.fliBugChoiceColor;\n            } else {\n                this.borderColor = this.bgColor;\n            }\n        }\n\n        if (this.paletteChoices.background)\n            this.globalValid.push(this.bgColor);\n        if (this.paletteChoices.aux)\n            this.globalValid.push(this.auxColor);\n        if (this.paletteChoices.border)\n            this.globalValid.push(this.borderColor);\n    }\n    getValidColors(index: number) {\n        let [ncols, col] = this.imageIndexToImageColumnInfo(index);\n\n        let [performBug, blank, leftBlank, rightBlank, bugCol] = this.isImageIndexInFliBugBlankingArea(index);\n        if (blank)\n            return [this.bgColor];\n\n        let p = this.imageIndexToParamOffset(index);\n        let c1 = this.params[p] & 0xf;\n        let c2 = (this.params[p] >> 4) & 0xf;\n        let c3 = (this.params[p] >> 8) & 0xf;\n\n        if (performBug) {\n            // the choices are terrible in the \"bug\" fli area\n            c1 = c2 = this.fliBugChoiceColor;\n            c3 = this.fliBugCbColor;\n        }\n\n        let valid: number[] = this.globalValid.slice(0, this.globalValid.length);\n        valid.push(c1, c2, c3);\n        valid = valid.slice(0, this.globalValid.length + this.paletteChoices.colors);\n        return valid;\n    }\n    guessParam(pUnknown: number) {\n        // do not let the caller compute the parameters for anything other that the\n        // bitmap area, as the other parameters are for the color block or the extra data\n        // as these values are computed as a result of processing the bitmap data\n        if (pUnknown >= this.cbOffset)\n            return;\n\n        return this.actualGuessParam(pUnknown);\n    }\n    actualGuessParam(pUnknown: number) {\n        console.assert(pUnknown < this.params.length - this.extra);\n\n        // does color block ram exist (presumption true is that it does/must exist, false to disable)\n        const calculateCb = this.useCb && (this.iterateCount < MAX_ITERATE_COUNT / 2);\n\n        let isCalculatingCb = (pUnknown >= this.cbOffset);\n        if ((isCalculatingCb) && (!calculateCb))\n            return;\n\n        let index = this.paramOrCbParamOffsetToImageIndex(pUnknown);\n\n        let cbp = (isCalculatingCb ? pUnknown : this.imageIndexToCbParamOffset(index));\n        let p = (isCalculatingCb ? this.imageIndexToParamOffset(index) : pUnknown);\n\n        if (!isCalculatingCb) {\n            // Whenever the color block color changes the surrounding pixels that also\n            // could reference that color block should be forced to NOT choose the same\n            // color as this color is always available in the color block, and choosing\n            // this same color in the color block would be wasted. As param colors are\n            // \"guessed\" in the order of the array, this ensures the color block is\n            // always calculated BEFORE the pixel colors\n            //\n            // Extra logic filters out to only calculate for the first row of any color\n            // block area, and only calculate the color block is the current color block\n            // is different than the last computed color block.\n            if (calculateCb && (this.isImageIndexFirstRowOfColorBlock(index)) && (this.lastComputedCb != cbp)) {\n                this.actualGuessParam(cbp);\n            }\n        } else {\n            this.lastComputedCb = cbp;\n        }\n\n        let [performBug, blank, leftBlank, rightBlank, bugCol] = this.isImageIndexInFliBugBlankingArea(index);\n\n        console.assert((isCalculatingCb) || (p == pUnknown));\n        console.assert((!isCalculatingCb) || (cbp == pUnknown));\n\n        let useB = isCalculatingCb ? this.cb : this.b;\n\n        // rank all colors within the size of the block (and bordering values)\n        let histo = new Uint32Array(16);\n\n        // going to scan a pixel area that is the pixel (sub)block in size\n        // +/- pixels bleeding left/right and above/below\n        let [xStart, yStart] = this.paramOrCbParamOffsetToXy(p);\n\n        for (let y = yStart - useB.yb; y < yStart + useB.h + useB.yb; y++) {\n            for (let x = xStart - useB.xb; x < xStart + useB.w + useB.xb; x++) {\n                this.updateHisto(histo, this.pixelPaletteChoices, x, y);\n            }\n        }\n\n        // never choose the colors that are always valid and available\n        // for every pixel (i.e. why waste the screen ram or color block\n        // ram on a color that is always available everywhere)\n        if (this.paletteChoices.background)\n            histo[this.bgColor] = 0;\n        if (this.paletteChoices.aux)\n            histo[this.auxColor] = 0;\n        if (this.paletteChoices.border)\n            histo[this.borderColor] = 0;\n\n        let cbColor: number = 0;\n\n        if ((!isCalculatingCb) && (this.useCb)) {\n            // filter out the cb chosen color as there's no point in choosing the\n            // same color option twice since it's already valid for this pixel\n            // block area (just like the background color is valid)\n            histo[this.params[cbp] & 0xf] = 0;\n            // promote this value to the lower nybble of the 2nd least significant byte\n            // as this value is needed later\n            cbColor = this.params[cbp] & 0xf;\n        }\n\n        // get best choices for sub-block\n        let choices = getChoices(histo);\n        let ind1 = choices[0] && choices[0].ind;\n        let ind2 = choices[1] && choices[1].ind;\n        let ind3 = choices[2] && choices[2].ind;\n        if (ind1 === undefined)\n            ind1 = this.bgColor;\n        if (ind2 === undefined)\n            ind2 = this.bgColor;\n        if (ind3 === undefined)\n            ind3 = this.bgColor;\n\n        if (!this.useCb) {\n            cbColor = ind3;\n        }\n\n        if (leftBlank) {\n            // force the chosen colors to all be background in the FLI bug area\n            cbColor = ind1 = ind2 = ind3 = this.bgColor;\n            if (!this.paletteChoices.background)\n                ind1 = ind2 = this.fliBugChoiceColor;\n        } else if (rightBlank) {\n            cbColor = ind1 = ind2 = ind3 = this.bgColor;\n            if (!this.paletteChoices.background)\n                ind1 = ind2 = this.fliBugChoiceColor;\n        }\n\n        if (isCalculatingCb) {\n            if (performBug) {\n                ind1 = this.fliBugCbColor;\n            }\n            this.params[cbp] = cbColor = ind1;\n            return cbColor;\n        }\n\n        if (performBug) {\n            // the choices when in the fli \"bug\" area are terrible\n            // (because the VIC is unable to fetch the real colors\n            // during a \"bad line\" event)\n            ind1 = ind2 = this.fliBugChoiceColor;\n            cbColor = this.fliBugCbColor;\n        }\n\n        // Store the chosen colors in the lower and upper nybble\n        // and put the chosen color block nybble into the low nybble of\n        // the 2nd least significant byte. Even though this routine does\n        // not use this value anywhere, the value is require on the export\n        // routine to determine when char data needs to pick the pixel\n        // index of %00 (background) %01 %10 (choice 1+2) and %11 meaning\n        // use the color block color as a choice. The export routine is\n        // unaware of the separated dedicated color block and only looks\n        // for the color choices attached with each \"normal\" pixel param.\n        return this.params[p] = (ind1 & 0xf) | ((ind2 << 4) & 0xf0) | ((cbColor << 8) & 0xf00);\n    }\n    updateHisto(histo: Uint32Array, colors: number[], x: number, y: number) {\n        let i = this.xyToImageIndex(x, y);\n\n        // get current color (or reference for 1st time)\n        let c1 = ((i === undefined) ? this.pal[this.bgColor] : this.indexed[i]);\n        histo[c1] += 100;\n        // get error color (TODO: why alt not img like 2-color kernels?)\n        let rgbcomp = ((i === undefined) ? this.pal[this.bgColor] : this.alt[i]);\n        let c2 = this.getClosest(rgbcomp, colors);\n        histo[c2] += 1 + this.noise;\n    }\n    paramOrCbParamOffsetToImageIndex(pUnknown: number): number {\n        let isCalculatingCb = (pUnknown >= this.cbOffset);\n        let useB = (isCalculatingCb ? this.cb : this.b);\n        let useP = (isCalculatingCb ? (pUnknown - this.cbOffset) : pUnknown);\n\n        var ncols = this.width / useB.w;     // number of pixels in a row\n        var col = useP % ncols;                // column for pixel in X direction\n        var row = Math.floor(useP / ncols);    // row for pixel in Y direction\n        // index is the starting offset representing the image's pixel X/Y\n        var index = (col * useB.w) + (row * this.width * useB.h);\n        console.assert(index < (this.width * this.height));\n        return index;\n    }\n\n    isImageIndexInFliBugBlankingArea(index: number): [boolean, boolean, boolean, boolean, number] {\n        let [ncols, col] = this.imageIndexToImageColumnInfo(index);\n\n        let bugLogic = (this.fliBug && ((col >= 0) && (col < this.blankFliBugColumnCount))) && (!this.blankLeftScreenFliBugArea);\n        let leftBlank = this.blankLeftScreenFliBugArea && ((col >= 0) && (col < this.blankFliBugColumnCount));\n        let rightBlank = this.blankLeftScreenFliBugArea && this.blankRightScreenMirrorFliBugArea && ((col >= (ncols - this.blankFliBugColumnCount)) && (col < ncols));\n        let blank = leftBlank || rightBlank;\n\n        return [bugLogic, blank, leftBlank, rightBlank, col];\n    }\n    imageIndexToImageColumnInfo(index: number): [number, number] {\n        let ncols = this.width / this.b.w;\n        let col = Math.floor(index / this.b.w) % ncols;\n        return [ncols, col];\n    }\n\n    paramOrCbParamOffsetToXy(pUnknown: number): [number, number] {\n        let imageIndex = this.paramOrCbParamOffsetToImageIndex(pUnknown);\n        return this.imageIndexToXY(imageIndex);\n    }\n\n    imageIndexToXY(index: number): [number, number] {\n        return [index % this.width, Math.floor(index / this.width)];\n    }\n    xyToImageIndex(x: number, y: number): number | undefined {\n        if ((x < 0) || (y < 0))\n            return undefined;\n        if ((x >= this.width) || (y >= this.height))\n            return undefined;\n        return y * this.width + x;\n    }\n    imageIndexToParamOffset(index: number): number {\n        let [ncols, col] = this.imageIndexToImageColumnInfo(index);\n        let row = Math.floor(index / (this.width * this.b.h));\n        let p = col + row * ncols;\n        console.assert(p < this.cbOffset);\n        return p;\n    }\n    imageIndexToCbParamOffset(index: number): number {\n        if (!this.useCb)\n            return this.cbOffset;\n\n        var ncols = this.width / this.cb.w;\n        var col = Math.floor(index / this.cb.w) % ncols;\n        var row = Math.floor(index / (this.width * this.cb.h));\n        var cbp = this.cbOffset + col + row * ncols;\n        console.assert(cbp >= this.cbOffset);\n        console.assert(cbp < this.params.length - this.extra);\n        return cbp;\n    }\n    isImageIndexFirstRowOfColorBlock(index: number): boolean {\n        var ncols = this.width / this.b.w;\n        var row = Math.floor(index / (this.width * this.b.h));\n        return 0 == row % Math.floor(this.cb.h / this.b.h);\n    }\n}\n\nexport class ZXSpectrum_Canvas extends TwoColor_Canvas {\n    w: number;\n    h: number;\n    xb: number | undefined;\n    yb: number | undefined;\n\n    darkPalette: Uint32Array;\n    brightPalette: Uint32Array;\n\n    darkColors: number[];\n    brightColors: number[];\n    aux: boolean;\n\n    paletteRange: PaletteRange;\n\n    init() {\n        this.darkColors = range(0, Math.floor(this.pal.length / 2));\n        this.brightColors = range(Math.floor(this.pal.length / 2), this.pal.length);\n        this.w = this.sys.block.w;\n        this.h = this.sys.block.h;\n        this.paletteRange = { min: 0, max: this.pal.length };\n        this.paletteRange = this.sys.paletteChoices === undefined ?\n            this.paletteRange :\n            (this.sys.paletteChoices.colorsRange === undefined ? this.paletteRange : this.sys.paletteChoices.colorsRange);\n        this.aux = this.sys.paletteChoices === undefined ? false : (this.sys.paletteChoices.aux === undefined ? false : this.sys.paletteChoices.aux);\n\n        this.xb = (this.sys.cb === undefined ? this.border : this.sys.cb.xb);\n        this.yb = (this.sys.cb === undefined ? this.border : this.sys.cb.yb);\n        this.xb = (this.xb === undefined ? this.border : this.xb);\n        this.yb = (this.yb === undefined ? this.border : this.yb);\n\n        this.darkPalette = this.pal.slice(0, Math.floor(this.pal.length / 2));\n        this.brightPalette = this.pal.slice(Math.floor(this.pal.length / 2), this.pal.length);\n        super.init();\n    }\n\n    guessParam(p: number) {\n        let col = p % this.ncols;\n        let row = Math.floor(p / this.ncols);\n        let offset = col * this.w + row * (this.width * this.h);\n\n        let calculateHistoForCell = (colors: number[], min: number, max: number) => {\n            let histo = new Uint32Array(Math.floor(this.pal.length));\n\n            // pixel overlap in 8x8 window\n            for (let y = -this.yb; y < this.h + this.yb; y++) {\n                let o = offset + y * this.width;\n                for (let x = -this.xb; x < this.w + this.xb; x++) {\n                    let c1 = this.indexed[o + x] | 0;\n                    // because the result becomes \"pulled\" towards the\n                    // reference image, the scoring needs to take into\n                    // account that the palette may have chosen the\n                    // other dark/bright versions instead so if the\n                    // palette then flips choices, the \"pull\" will\n                    // not happen properly if the previous color chosen\n                    // previously is not present on the new palette\n                    if ((c1 < min) || (c1 > max))\n                        histo[c1 ^ 0b1000] += 100;\n                    else\n                        histo[c1] += 100;\n                    let c2 = this.getClosest(this.alt[o + x] | 0, colors);\n                    histo[c2] += 1 + this.noise;\n                }\n            }\n\n            let choices = getChoices(histo);\n            return choices;\n        };\n\n        let scoreChoices = (choices: {count: number, ind: number}[], palette: Uint32Array) => {\n            let overallScore = 0;\n            for (let y = -this.yb; y < this.h + this.yb; y++) {\n                let o = offset + y * this.width;\n                for (let x = -this.xb; x < this.w + this.xb; x++) {\n                    let smallest: number = NaN;\n                    for (let c = 0; c < choices.length; ++c) {\n                        // score against the reference image, not against the dithered image\n                        let score = this.errfn(this.ref[o + x], palette[choices[c].ind]);\n                        if ((score < smallest) || (Number.isNaN(smallest)))\n                            smallest = score;\n                    }\n                    overallScore += smallest;\n                }\n            }\n            return overallScore;\n        };\n\n        // The Zx spectrum requires that the colors chosen be either both from the\n        // bright spectrum of the palette or both from the dark spectrum of the palette.\n        // This choice of bright or not bright is applied to the entire cell and mixing\n        // a bright or non-bright color for a cell is not possible.\n        //\n        // As such, the routine picks the best two colors from the dark palette and\n        // picks the best two colors from the bright palette. Then the dark palette\n        // is scored against the bright palette. If the bright palette better\n        // represents the color (by having the \"closest\" rgb score), then the bright\n        // color is chosen otherwise the dark color is chosen by default.\n\n        // pick the top two colors from bright and dark mode\n        let choices1 = calculateHistoForCell(this.darkColors, this.darkColors[0], this.darkColors[this.darkColors.length - 1]).slice(0, 2);\n        let choices2 = calculateHistoForCell(this.brightColors, this.brightColors[0], this.brightColors[this.brightColors.length - 1]).slice(0, 2);\n\n        if (choices1.length < 2)\n            choices1.push(choices1[0]);\n        if (choices2.length < 2)\n            choices2.push(choices2[0]);\n\n        console.assert(choices1.length >= 2);\n        console.assert(choices2.length >= 2);\n\n        let score1 = scoreChoices(choices1, this.pal);\n        let score2 = scoreChoices(choices2, this.pal);\n\n        let result = score2 < score1 ? choices2 : choices1;\n\n        if ((result[0].ind < this.paletteRange.min) || (result[0].ind > this.paletteRange.max)) {\n            // cannot choose what was chosen (because of palette restrictions) so swap to the\n            // other palette (even if it isn't the best representation of the color)\n            result = score2 < score1 ? choices1 : choices2;\n        }\n\n        console.assert(result[0].ind >= this.paletteRange.min);\n        console.assert(result[0].ind <= this.paletteRange.max);\n        console.assert(result[1].ind >= this.paletteRange.min);\n        console.assert(result[1].ind <= this.paletteRange.max);\n\n        if (this.aux) {\n            result[0].ind = (result[0].ind ^ 0b1000);\n            result[1].ind = (result[1].ind ^ 0b1000);\n        }\n        \n        this.updateParams(p, result);\n    }\n}\n\n\nexport class NES_Canvas extends BasicParamDitherCanvas {\n    w = 16;\n    h = 16;\n    allColors = [0, 1, 2, 3, 4];\n    init() {\n        this.params = new Uint32Array(this.width / this.w * this.height / this.h);\n        for (var i = 0; i < this.params.length; i++) {\n            this.guessParam(i);\n        }\n    }\n    getValidColors(offset: number) {\n        var ncols = this.width / this.w;\n        var col = Math.floor(offset / this.w) % ncols;\n        var row = Math.floor(offset / (this.width * this.h));\n        var i = col + row * ncols;\n        var c1 = this.params[i];\n        // param specified which color to leave out\n        switch (c1 & 3) {\n            case 0: return [0, 2, 3, 4];\n            case 1: return [0, 1, 3, 4];\n            case 2: return [0, 1, 2, 4];\n            case 3: return [0, 1, 2, 3];\n        }\n        throw new Error(\"invalid param \" + c1);\n    }\n    guessParam(p: number) {\n        var ncols = this.width / this.w;\n        var col = p % ncols;\n        var row = Math.floor(p / ncols);\n        var offset = col * this.w + row * this.width * this.h;\n        var colors = [1, 2, 3, 4];\n        // rank all colors\n        var histo = new Uint32Array(16);\n        var b = 8; // border (TODO: param)\n        for (var y = -b; y < this.h + b; y++) {\n            var o = offset + y * this.width;\n            for (var x = -b; x < this.w + b; x++) {\n                // get current color (or reference for 1st time)\n                var c1 = this.indexed[o + x] | 0;\n                histo[c1] += 100;\n                // get error color (TODO: why ref works better?)\n                var rgbcomp = this.alt[o + x] | 0;\n                var c2 = this.getClosest(rgbcomp, colors);\n                histo[c2] += 1 + this.noise;\n            }\n        }\n        var choices = getChoices(histo);\n        // leave out last color, least frequent\n        choices.forEach((ch) => {\n            if (ch.ind >= 1 && ch.ind <= 4) this.params[p] = ch.ind - 1;\n        });\n    }\n}\n\nexport class HAM6_Canvas extends DitheringCanvas {\n    getValidColors(offset: number): number[] {\n        let arr = super.getValidColors(offset);\n        if (offset == 0) {\n            arr = arr.slice(0, 16);\n        } else {\n            let palindex = 16;\n            let prevrgb = this.img[offset - 1];\n            for (let chan = 0; chan < 3; chan++) {\n                for (let i = 0; i < 16; i++) {\n                    let rgb = prevrgb;\n                    rgb &= ~(0xff << (chan * 8));\n                    rgb |= (i << 4) << (chan * 8);\n                    this.pal[palindex++] = rgb;\n                }\n            }\n        }\n        return arr;\n    }\n}\n", "import { getChoices, getClosestRGB, getRGBADiff, getRGBAErrorPerceptual } from \"../common/color\";\nimport { DitherKernel, DithertronSettings, RGBDistanceFunction } from \"../common/types\";\nimport { range } from \"../common/util\";\n\nconst THRESHOLD_MAP_4X4 = [\n    0, 8, 2, 10,\n    12, 4, 14, 6,\n    3, 11, 1, 9,\n    15, 7, 13, 5,\n];\n\nexport class BaseDitheringCanvas {\n    sys: DithertronSettings;\n    pal: Uint32Array;\n    img: Uint32Array;\n    ref: Uint32Array;\n    alt: Uint32Array;\n    err: Float32Array; // (n*3)\n    indexed: Uint8Array;\n    width: number; // integer\n    height: number;\n    tmp: Uint8ClampedArray;\n    tmp2: Uint32Array;\n    changes: number;\n    noise: number = 0;\n    diffuse: number = 0.8;\n    ordered: number = 0.0;\n    ditherfn: DitherKernel = [];\n    errfn: RGBDistanceFunction = getRGBAErrorPerceptual;\n    iterateCount: number = 0;\n    params: Uint32Array;\n\n    constructor(img: Uint32Array, width: number, pal: Uint32Array) {\n        this.img = img;\n        for (var i = 0; i < pal.length; i++)\n            pal[i] |= 0xff000000;\n        this.pal = new Uint32Array(pal);\n        this.width = width;\n        this.height = Math.floor(img.length / width);\n        this.tmp = new Uint8ClampedArray(4);\n        this.tmp2 = new Uint32Array(this.tmp.buffer);\n        this.ref = new Uint32Array(img);\n        this.alt = new Uint32Array(this.ref);\n        this.err = new Float32Array(this.ref.length * 3);\n        this.indexed = new Uint8Array(this.ref.length);\n        this.changes = 0;\n        this.reset();\n    }\n    reset() {\n        this.img = new Uint32Array(this.ref);\n        this.alt.set(this.ref);\n        this.err.fill(0);\n        this.indexed.fill(0);\n        this.changes = 0;\n    }\n    init() {\n    }\n    update(offset: number) {\n        var errofs = offset * 3;\n        var rgbref = this.ref[offset];\n        // add cumulative error to pixel color, store into a clamped R,G, and B values (0-255) array\n        var ko = 1;\n        if (this.ordered > 0) {\n            let x = (offset % this.width) & 3;\n            let y = (offset / this.width) & 3;\n            ko = 1 + (THRESHOLD_MAP_4X4[x + y * 4] / 15 - 0.5) * this.ordered;\n        }\n        this.tmp[0] = (rgbref & 0xff) * ko + this.err[errofs];\n        this.tmp[1] = ((rgbref >> 8) & 0xff) * ko + this.err[errofs + 1];\n        this.tmp[2] = ((rgbref >> 16) & 0xff) * ko + this.err[errofs + 2];\n        // store the error-modified color\n        this.alt[offset] = this.tmp2[0];\n        // find closest palette color\n        var valid = this.getValidColors(offset);\n        var palidx = this.getClosest(this.tmp2[0], valid);\n        var rgbimg = this.pal[palidx];\n        // compute error and distribute to neighbors\n        var err = getRGBADiff(rgbref, rgbimg);\n        for (var i = 0; i < 3; i++) {\n            var k = (this.err[errofs + i] + err[i]) * this.diffuse;\n            // TODO: don't wrap off right edge?\n            this.ditherfn.forEach((df) => {\n                this.err[errofs + i + (df[0] + df[1] * this.width) * 3] += k * df[2];\n            });\n            this.err[errofs + i] = 0; // reset this pixel's error\n        }\n        // set new pixel rgb\n        if (this.indexed[offset] != palidx) {\n            this.indexed[offset] = palidx;\n            this.changes++;\n        }\n        this.img[offset] = rgbimg;\n        //this.img[offset] = this.tmp2[0] | 0xff000000;\n    }\n    getClosest(rgb: number, inds: number[]) {\n        return getClosestRGB(rgb, inds, this.pal, this.errfn);\n    }\n    iterate() {\n        this.changes = 0;\n        for (var i = 0; i < this.img.length; i++) {\n            this.update(i);\n        }\n        this.commit();\n        this.iterateCount++;\n    }\n    commit() {\n        //\n    }\n    getValidColors(offset: number): number[] {\n        return range(0, this.pal.length);\n    }\n}\n\nexport abstract class ParamDitherCanvas extends BaseDitheringCanvas {\n    params: Uint32Array = new Uint32Array(0);\n\n    abstract guessParam(paramIndex: number): void;\n\n    abstract init();\n\n    commit() {\n        for (var i = 0; i < this.params.length; i++) {\n            this.guessParam(i);\n        }\n    }\n}\n\nexport abstract class BasicParamDitherCanvas extends ParamDitherCanvas {\n    abstract w: number;\n    abstract h: number;\n\n    init() {\n        this.params = new Uint32Array(this.width * this.height / this.w);\n        for (var i = 0; i < this.params.length; i++) {\n            this.guessParam(i);\n        }\n    }\n}\n\n// TODO: both colors affected by bright bit\nexport abstract class TwoColor_Canvas extends BasicParamDitherCanvas {\n    ncols: number = 0;\n    nrows: number = 0;\n    border: number = 0;\n    allColors: number[] | null = null;\n\n    init() {\n        if (!this.allColors) this.allColors = range(0, this.pal.length);\n        this.indexed.fill(this.allColors[0]);\n        this.ncols = this.width / this.w;\n        this.nrows = this.height / this.h;\n        this.params = new Uint32Array(this.ncols * this.nrows);\n        for (var i = 0; i < this.params.length; i++) {\n            this.guessParam(i);\n        }\n    }\n    getValidColors(offset: number) {\n        var col = Math.floor(offset / this.w) % this.ncols;\n        var row = Math.floor(offset / (this.width * this.h));\n        var i = col + row * this.ncols;\n        var c1 = this.params[i] & 0xff;\n        var c2 = (this.params[i] >> 8) & 0xff;\n        return [c1, c2];\n    }\n    guessParam(p: number) {\n        var col = p % this.ncols;\n        var row = Math.floor(p / this.ncols);\n        var offset = col * this.w + row * (this.width * this.h);\n        var colors = this.allColors!;\n        var histo = new Uint32Array(256);\n        // pixel overlap in 8x8 window\n        var b = this.border; // border\n        for (var y = -b; y < this.h + b; y++) {\n            var o = offset + y * this.width;\n            for (var x = -b; x < this.w + b; x++) {\n                var c1 = this.indexed[o + x] | 0;\n                histo[c1] += 100;\n                var c2 = this.getClosest(this.alt[o + x] | 0, colors);\n                histo[c2] += 1 + this.noise;\n            }\n        }\n        var choices = getChoices(histo);\n        this.updateParams(p, choices);\n    }\n    updateParams(p: number, choices: { ind: number }[]) {\n        var ind1 = choices[0].ind;\n        var ind2 = choices[1] ? choices[1].ind : ind1;\n        if (ind1 > ind2) {\n            var tmp = ind1;\n            ind1 = ind2;\n            ind2 = tmp;\n        }\n        this.params[p] = ind1 + (ind2 << 8);\n    }\n}\n\nexport abstract class OneColor_Canvas extends TwoColor_Canvas {\n    bgColor: number = 0;\n\n    init() {\n        /*\n        var choices = reducePaletteChoices(this.ref, this.pal, 2, 1, this.errfn);\n        this.bgColor = choices[choices.length-1].ind;\n        this.allColors = [1,2,3,4,5,6,7].filter(x => x != this.bgColor);\n        console.log(this.bgColor, this.allColors);\n        */\n        this.bgColor = 0;\n        super.init();\n    }\n    getValidColors(offset: number) {\n        return [this.bgColor, super.getValidColors(offset)[0]];\n    }\n    updateParams(p: number, choices: { ind: number }[]) {\n        for (let c of choices) {\n            if (c.ind != this.bgColor) {\n                this.params[p] = c.ind;\n                break;\n            }\n        }\n    }\n}", "\nimport { ERROR_FUNCTIONS, getRGBAErrorPerceptual, reducePalette } from '../common/color';\nimport { DithertronSettings, PixelsAvailableMessage } from '../common/types';\nimport { SYSTEMS } from '../settings/systems';\nimport * as canvas from './canvas';\n\n/*\nconst emglobal : any = this['window'] || (this as any)['global'] || this;\nconst ENVIRONMENT_IS_WEB = typeof window === 'object';\nconst ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';\n*/\n\n//\n\nexport const MAX_ITERATE_COUNT = 100;\n\nexport interface DithertronInterface {\n    iterate(): void;\n}\n\nexport class Dithertron implements DithertronInterface {\n    sysparams: DithertronSettings = SYSTEMS[0];\n    dithcanv: canvas.DitheringCanvas | null = null;\n    sourceImageData: Uint32Array | null = null;\n    pixelsAvailable: ((msg: PixelsAvailableMessage) => void) | null = null;\n    timer: any;\n\n    setSettings(sys: DithertronSettings) {\n        this.sysparams = Object.assign({}, sys); // clone settings\n    }\n    setSourceImage(imageData: Uint32Array) {\n        this.sourceImageData = imageData;\n    }\n    iterate(): boolean {\n        if (this.dithcanv == null) {\n            var sys = this.sysparams;\n            if (!sys) throw new Error(\"no sysparams\");\n            if (!this.sourceImageData) throw new Error(\"no sourceImageData\");\n            var pal = new Uint32Array(sys.pal);\n            var errfn = (ERROR_FUNCTIONS as any)[sys.errfn || 'perceptual'] || getRGBAErrorPerceptual;\n            if (sys.reduce) {\n                pal = reducePalette(this.sourceImageData, pal,\n                    sys.reduce, sys.paletteDiversity || 0, errfn);\n            }\n            if (sys.extraColors) {\n                let pal2 = new Uint32Array(pal.length + sys.extraColors);\n                pal2.set(pal);\n                pal = pal2;\n            }\n            var convFunction = canvas[sys.conv];\n            if (!convFunction) throw new Error(\"no convFunction for \" + sys.conv);\n            this.dithcanv = new convFunction(this.sourceImageData, sys.width, pal);\n            if (!this.dithcanv) throw new Error(\"no convFunction() for \" + sys.conv);\n            this.dithcanv.sys = sys;\n            this.dithcanv.errfn = errfn;\n            this.dithcanv.noise = sys.noise ? (1 << sys.noise) : 0;\n            this.dithcanv.diffuse = (sys.diffuse || 0) + 0;\n            this.dithcanv.ordered = (sys.ordered || 0) + 0;\n            this.dithcanv.ditherfn = sys.ditherfn || [];\n            this.dithcanv.init();\n        }\n        this.dithcanv.iterate();\n        this.dithcanv.noise >>= 1; // divide by 2\n        var final = this.dithcanv.changes == 0 || this.dithcanv.iterateCount > MAX_ITERATE_COUNT;\n        if (this.pixelsAvailable != null) {\n            this.pixelsAvailable({\n                img: this.dithcanv.img,\n                width: this.dithcanv.width,\n                height: this.dithcanv.height,\n                pal: this.dithcanv.pal,\n                indexed: this.dithcanv.indexed,\n                params: this.dithcanv.params,\n                final: final,\n            });\n        }\n        return !final;\n    }\n    iterateIfNeeded() {\n        if (this.iterate()) {\n            //console.log(this.dithcanv.noise, this.dithcanv.changes, this.dithcanv.iterateCount);\n        } else {\n            this.stop();\n            console.log('stop', this.dithcanv?.iterateCount);\n        }\n    }\n    clear() {\n        this.dithcanv = null;\n    }\n    restart() {\n        this.clear();\n        this.start();\n    }\n    stop() {\n        clearTimeout(this.timer);\n        this.timer = undefined;\n    }\n    start() {\n        if (this.sysparams == null) return;\n        if (this.sourceImageData == null) return;\n        if (this.timer == null) {\n            const msec = 50;\n            var fn = () => {\n                this.timer = setTimeout(fn, msec);\n                this.iterateIfNeeded();\n            }\n            this.timer = setTimeout(fn, msec);\n        }\n    }\n}\n\n", "import { Dithertron } from \"../dither/dithertron\";\nimport { PixelsAvailableMessage } from \"../common/types\";\n\n//declare function postMessage(msg:any):void;\n\nvar worker_dtron = new Dithertron();\n\nonmessage = function (e) {\n    if (e && e.data) {\n        console.log(e.data.cmd);\n        switch (e.data.cmd) {\n            case 'restart': return worker_dtron.restart();\n            case 'setSettings': return worker_dtron.setSettings(e.data.data);\n            case 'setSourceImage': return worker_dtron.setSourceImage(e.data.data);\n        }\n    }\n}\n\nworker_dtron.pixelsAvailable = (msg: PixelsAvailableMessage) => {\n    postMessage(msg);\n};\n"],
  "mappings": "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U;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IACtJ;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IACtJ;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IACtJ;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IACtJ;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IACtJ;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IACtJ;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IACtJ;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;AAAA,IAAU;A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",
  "names": ["VICII_Canvas_Details", "range"]
}
